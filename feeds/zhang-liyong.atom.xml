<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lyon's Blog</title><link href="http://zhangliyong.github.io/" rel="alternate"></link><link href="http://zhangliyong.github.io/feeds/zhang-liyong.atom.xml" rel="self"></link><id>http://zhangliyong.github.io/</id><updated>2014-10-11T00:00:00+08:00</updated><entry><title>Hight Throughput Web Server Tunning</title><link href="http://zhangliyong.github.io/posts/2014/10/11/hight-throughput-web-server-tunning.html" rel="alternate"></link><updated>2014-10-11T00:00:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-10-11:posts/2014/10/11/hight-throughput-web-server-tunning.html</id><summary type="html">&lt;h2 id="performace-analysis"&gt;Performace analysis&lt;/h2&gt;
&lt;p&gt;how to find the bottleneck of the server performace.&lt;/p&gt;
&lt;p&gt;Check out this fabulous pic from &lt;a href="http://www.brendangregg.com/linuxperf.html"&gt;http://www.brendangregg.com/linuxperf.html&lt;/a&gt;
&lt;img alt="linux_observability_tools" src="http://www.brendangregg.com/Perf/linux_observability_tools.png" /&gt;&lt;/p&gt;
&lt;p&gt;and this great slices: &lt;a href="http://www.slideshare.net/brendangregg/linux-performance-tools"&gt;http://www.slideshare.net/brendangregg/linux-performance-tools&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First you need to monitor you server and services, you can use munin, there are a lot of options.&lt;/p&gt;
&lt;p&gt;When the service slow down, I would login to the service, using the following tools:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;htop&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hisham.hm/htop/index.php"&gt;htop&lt;/a&gt; is great, it's like &lt;code&gt;top&lt;/code&gt;, but better, I highly recommend this tool.&lt;/p&gt;
&lt;p&gt;&lt;img alt="htop" src="http://hisham.hm/htop/htop-1.0-screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;watch the &lt;code&gt;load&lt;/code&gt;, if &lt;code&gt;load&lt;/code&gt; &amp;gt; number of CPUs, may mean CPU saturation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vmstat&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;vmstat&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;procs&lt;/span&gt; &lt;span class="o"&gt;-----------&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;----------&lt;/span&gt; &lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt;  &lt;span class="n"&gt;b&lt;/span&gt;   &lt;span class="n"&gt;swpd&lt;/span&gt;   &lt;span class="n"&gt;free&lt;/span&gt;   &lt;span class="n"&gt;buff&lt;/span&gt;  &lt;span class="n"&gt;cache&lt;/span&gt;   &lt;span class="n"&gt;si&lt;/span&gt;   &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;29549320&lt;/span&gt;  &lt;span class="mi"&gt;29252&lt;/span&gt; &lt;span class="mi"&gt;9299060&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;29547876&lt;/span&gt;  &lt;span class="mi"&gt;29252&lt;/span&gt; &lt;span class="mi"&gt;9299332&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;29548124&lt;/span&gt;  &lt;span class="mi"&gt;29252&lt;/span&gt; &lt;span class="mi"&gt;9299460&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;29548840&lt;/span&gt;  &lt;span class="mi"&gt;29252&lt;/span&gt; &lt;span class="mi"&gt;9299592&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The procs data reports the number of processing jobs waiting to run and allows you to determine if there are processes “blocking” your system from running smoothly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;r&lt;/code&gt; column displays the total number of processes waiting for access to the processor. The &lt;code&gt;b&lt;/code&gt; column displays the total number of processes in a “sleep” state.&lt;/p&gt;
&lt;p&gt;I usually see &lt;code&gt;r&lt;/code&gt; value, if it's big, it means the server is in a high load.&lt;/p&gt;
&lt;p&gt;For other data meaning, ref: &lt;a href="https://www.linode.com/docs/uptime/monitoring/use-vmstat-to-monitor-system-performance"&gt;https://www.linode.com/docs/uptime/monitoring/use-vmstat-to-monitor-system-performance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iostat iotop&lt;/p&gt;
&lt;p&gt;Block I/O status&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;iostat&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xmdz&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1st output is since boot.
For more information refer &lt;a href="http://www.thegeekstuff.com/2011/07/iostat-vmstat-mpstat-examples/"&gt;24 iostat, vmstat and mpstat Examples for Linux Performance Monitoring&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://guichaz.free.fr/iotop/"&gt;iotop&lt;/a&gt; can show which process use most I/O.&lt;/p&gt;
&lt;p&gt;&lt;img alt="iotop" src="http://guichaz.free.fr/iotop/iotop_big.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pidstat&lt;/p&gt;
&lt;p&gt;Very useful process stats. eg, by-thread, disk I/O:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iftop&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ex-parrot.com/pdw/iftop/"&gt;iftop&lt;/a&gt; show the network usage with other hosts.&lt;/p&gt;
&lt;p&gt;&lt;img alt="iftop" src="http://www.ex-parrot.com/pdw/iftop/iftop_normal.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="nginx-tunning"&gt;Nginx tunning&lt;/h2&gt;
&lt;h3 id="nginxconf"&gt;nginx.conf&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;keepalive_timeout&lt;/code&gt;: assigns the timeout for keep-alive connections with the client. Simply put, Nginx will close connections with the client after this period of time.&lt;/p&gt;
&lt;p&gt;keep this small value, like &lt;code&gt;keepalive_timeout 15;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="linux-tcp-performance-tuningsysctlconf"&gt;Linux TCP Performance Tuning(sysctl.conf)&lt;/h3&gt;
&lt;p&gt;There are two ways to change tcp parameters.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;change the value of parameter files in /proc/sys/net/
   e.g. increase the value of somaxconn
        &lt;code&gt;echo 1024 &amp;gt; /proc/sys/net/core/somaxconn&lt;/code&gt;
   when the server restart, the parameter will restore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;change the vlaue in /etc/sysctl.con, and run &lt;code&gt;sudo sysctl -p&lt;/code&gt; to apply the changes immediately,
   this can change the value permanently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/proc/sys/fs/file-max: The maximum number of concurrently open files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;/proc/sys/net/ipv4/tcp_max_syn_backlog: Maximum number of remembered connection requests, which are still did not receive an acknowledgment from connecting client. The default value is 1024 for systems with more than 128Mb of memory, and 128 for low memory machines. If server suffers of overload, try to increase this number.&lt;/li&gt;
&lt;li&gt;/proc/sys/net/core/somaxconn: Limit of socket listen() backlog, known in userspace as SOMAXCONN. Defaults to 128. The value should be raised substantially to support bursts of request. For example, to support a burst of 1024 requests, set somaxconn to 1024.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Linux"></category><category term="sysadmin"></category><category term="nginx"></category><category term="server"></category></entry><entry><title>Gevent Internals</title><link href="http://zhangliyong.github.io/posts/2014/09/23/gevent-internals.html" rel="alternate"></link><updated>2014-09-23T14:00:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-09-23:posts/2014/09/23/gevent-internals.html</id><summary type="html">&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.gevent.org/"&gt;Gevent&lt;/a&gt; is an efficient coroutine-based asynchronous concurrency framework, it is based on &lt;a href="http://software.schmorp.de/pkg/libev.html"&gt;libev&lt;/a&gt; and &lt;a href="http://greenlet.readthedocs.org/en/latest/"&gt;greenlet&lt;/a&gt;.
If you don't know how &lt;a href="http://greenlet.readthedocs.org/en/latest/"&gt;greenlet&lt;/a&gt; works, recommend to read &lt;a href="http://www.slideshare.net/saghul/understanding-greenlet"&gt;this&lt;/a&gt;. If you only want to know how to use gevent, recommend you read &lt;a href="http://sdiehl.github.io/gevent-tutorial/"&gt;http://sdiehl.github.io/gevent-tutorial/&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="greenlet-diagram"&gt;Greenlet diagram&lt;/h1&gt;
&lt;p&gt;First an example from official website. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gevent&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;gevent&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;gevent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethostbyname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gevent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;joinall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;74.125.79.106&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;208.77.188.166&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;82.94.164.162&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example gevent retrieve three ips from web concurrently.
&lt;code&gt;jobs = [gevent.spawn(socket.gethostbyname, url) for url in urls]&lt;/code&gt; create three task greenlets, and
&lt;code&gt;gevent.joinall(jobs, timeout=2)&lt;/code&gt; wait all the three task greenlets finished.&lt;/p&gt;
&lt;p&gt;This is the greenlet diagram of the program.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                             &lt;span class="o"&gt;+-----+&lt;/span&gt;
                      &lt;span class="o"&gt;+----&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
                      &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;+-----+&lt;/span&gt;
                      &lt;span class="o"&gt;|&lt;/span&gt;            
&lt;span class="o"&gt;+-------+&lt;/span&gt;      &lt;span class="o"&gt;+-----++&lt;/span&gt;      &lt;span class="o"&gt;+-----+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;  &lt;span class="o"&gt;+----&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;hub&lt;/span&gt; &lt;span class="o"&gt;|-----&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+-------+&lt;/span&gt;      &lt;span class="o"&gt;+-----++&lt;/span&gt;      &lt;span class="o"&gt;+-----+&lt;/span&gt;
                      &lt;span class="o"&gt;|&lt;/span&gt;            
                      &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="o"&gt;+-----+&lt;/span&gt;
                      &lt;span class="o"&gt;+----&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
                             &lt;span class="o"&gt;+-----+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="how-it-works"&gt;How it works&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt; is the default greenlet, &lt;code&gt;task&lt;/code&gt; is the greenlet that do the real job, &lt;code&gt;hub&lt;/code&gt; greenlet is the core of gevent, it cooperates all other greenlets, including &lt;code&gt;main&lt;/code&gt;.
So what is &lt;code&gt;hub&lt;/code&gt;? &lt;code&gt;hub&lt;/code&gt; is where gevent use &lt;a href="http://software.schmorp.de/pkg/libev.html"&gt;libev&lt;/a&gt;. When &lt;a href="http://www.gevent.org/"&gt;gevent&lt;/a&gt; initializes, it create &lt;code&gt;hub&lt;/code&gt; first, and &lt;code&gt;hub&lt;/code&gt; is singleton, only one &lt;code&gt;hub&lt;/code&gt; exists in the thread.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_hub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return the hub for the current thread.&lt;/span&gt;

&lt;span class="sd"&gt;    If hub does not exists in the current thread, the new one is created with call to :meth:`get_hub_class`.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;_threadlocal&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_threadlocal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hub&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hubtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_hub_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;hub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_threadlocal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hubtype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When use do &lt;code&gt;gevent.spawn&lt;/code&gt;, gevent will create a task greenlet using &lt;code&gt;hub&lt;/code&gt; as parent.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;spawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Greenlet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spawn&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greenlet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greenlet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A light-weight cooperatively-scheduled execution unit.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;hub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_hub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;greenlet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Schedule the greenlet to run in this loop iteration&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_start_event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Return a new :class:`Greenlet` object, scheduled to start.&lt;/span&gt;

&lt;span class="sd"&gt;        The arguments are passed to :meth:`Greenlet.__init__`.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the begining, we said &lt;a href="http://www.gevent.org/"&gt;gevent&lt;/a&gt; use &lt;a href="http://software.schmorp.de/pkg/libev.html"&gt;libev&lt;/a&gt;, here &lt;code&gt;self.parent.loop.run_callback(self.switch)&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt; is from &lt;a href="http://software.schmorp.de/pkg/libev.html"&gt;libev&lt;/a&gt;, we register the new created task greenlet to &lt;code&gt;loop&lt;/code&gt;. when the &lt;code&gt;loop&lt;/code&gt; runs, it will execute the task greenlet.&lt;/p&gt;
&lt;p&gt;So when &lt;code&gt;loop&lt;/code&gt; runs, when &lt;code&gt;main&lt;/code&gt; do some block operations, it will switch to &lt;code&gt;hub&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;getcurrent&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Do not call Hub.run() directly&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c"&gt;# break the refcount cycle&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LoopExit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;This operation would block forever&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;loop.run()&lt;/code&gt; will be executed, so &lt;code&gt;loop&lt;/code&gt; can choose one greenlet to run, when the greenlet is also block or finished, it will choose another one to run.&lt;/p&gt;
&lt;p&gt;Next explain monkeypatch&lt;/p&gt;
&lt;h1 id="ref"&gt;Ref&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://blog.segmentfault.com/fantix/1190000000613814"&gt;http://blog.segmentfault.com/fantix/1190000000613814&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/surfly/gevent"&gt;https://github.com/surfly/gevent&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>HTTP keep-alive</title><link href="http://zhangliyong.github.io/posts/2014/09/23/http-keep-alive.html" rel="alternate"></link><updated>2014-09-23T13:09:56+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-09-23:posts/2014/09/23/http-keep-alive.html</id><summary type="html">&lt;p&gt;今天在阅读&lt;a href="http://jacobian.org/writing/django-performance-tips/"&gt;Django performance tips&lt;/a&gt;时发现关闭keepalive可以提高效率，原文如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Turn off KeepAlive
I don’t totally understand how KeepAlive works, but turning it off on our Django servers increased performance by something like 50%. Of course, don’t do this if the same server is also serving media… but you’re not doing that, right?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTTP keep-alive即是HTTP persistent connection，维基百科有详细说明：http://en.wikipedia.org/wiki/HTTP_persistent_connection&lt;/p&gt;
&lt;p&gt;如果使用keep-alive功能，多个http请求会使用同一个tcp连接，这样可节省多次建立连接的时间及资源消耗，&lt;/p&gt;
&lt;p&gt;下图显示了是否使用keep-alive功能的tcp连接对比图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="persistent connection" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/HTTP_persistent_connection.svg/500px-HTTP_persistent_connection.svg.png" /&gt;&lt;/p&gt;
&lt;p&gt;http 1.0默认不开启，可进行指定，http 1.1默认开启。&lt;/p&gt;
&lt;p&gt;上面我们看到启用keep-alive可节省多次建立连接的时间，但是服务器端要保持连接状态(nginx默认保持74s)，
这样会影响服务器端的性能。 而且目前网络带宽比较大，建立连接的延时比较少，
所以keep-alive在很多情况下会导致性能下降。这就验证了一开始那篇文章指出的在django servers中关闭keep-alive
功能可大约提升50%的性能。&lt;/p&gt;
&lt;p&gt;所以建议关系keep-alive功能，除非有特殊需求。&lt;/p&gt;
&lt;p&gt;下面介绍如何nginx中关系keep-alive功能&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wiki.nginx.org/HttpCoreModule#keepalive_timeout"&gt;nginx文档&lt;/a&gt;中有详细说明:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;keepalive_timeout&lt;/p&gt;
&lt;p&gt;Syntax: keepalive_timeout timeout [ header_timeout ]&lt;/p&gt;
&lt;p&gt;Default:    75s&lt;/p&gt;
&lt;p&gt;Context:    http
           server
           location&lt;/p&gt;
&lt;p&gt;Reference:  keepalive_timeout&lt;/p&gt;
&lt;p&gt;The first parameter assigns the timeout for keep-alive connections with the client. The server will close connections after this time.&lt;/p&gt;
&lt;p&gt;The optional second parameter assigns the time value in the header Keep-Alive: timeout=time of the response. This header can convince some browsers to close the connection, so that the server does not have to. Without this parameter, nginx does not send a Keep-Alive header (though this is not what makes a connection "keep-alive").&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们要关闭keep-alive功能，可在http, server或location中设置&lt;code&gt;keepalive_timeout  0;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;listen&lt;/span&gt;          &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;server_name&lt;/span&gt;     &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;access_log&lt;/span&gt;      &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;error_log&lt;/span&gt;       &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysite&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;keepalive_timeout&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;........&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下图给出了keepalive_timeout设置前后，http请求的header中connection的变化：&lt;/p&gt;
&lt;p&gt;&lt;img alt="keepalive" src="/images/nginx/keepalive/keepalive.png" /&gt;&lt;/p&gt;
&lt;p&gt;设置&lt;code&gt;keepalive_timeout  0;&lt;/code&gt;之后：&lt;/p&gt;
&lt;p&gt;&lt;img alt="notalive" src="/images/nginx/keepalive/notalive.png" /&gt;&lt;/p&gt;
&lt;p&gt;笔者并没有对keep-alive做相应性能方面的benchmark，所以不确定keep-alive对性能的影响，而且keep-alive对性能的影响也与应用场景有关。&lt;/p&gt;</summary></entry><entry><title>Insert datetime in vim</title><link href="http://zhangliyong.github.io/posts/2014/05/05/insert-datetime-in-vim.html" rel="alternate"></link><updated>2014-05-05T10:29:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-05-05:posts/2014/05/05/insert-datetime-in-vim.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="nb"&gt;insert&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="kt"&gt;date&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;map F3 to insert current date&lt;/span&gt;
&lt;span class="s2"&gt;nnoremap &amp;lt;F3&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d (%a)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;
&lt;span class="nx"&gt;inoremap&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;F3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="na"&gt;-R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="nx"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d (%a)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://vim.wikia.com/wiki/Insert_current_date_or_time"&gt;http://vim.wikia.com/wiki/Insert_current_date_or_time&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)"&gt;http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_1)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118"&gt;http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Use markdown to create presentation</title><link href="http://zhangliyong.github.io/posts/2014/04/27/markdown-to-slides.html" rel="alternate"></link><updated>2014-04-27T16:20:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-27:posts/2014/04/27/markdown-to-slides.html</id><summary type="html">&lt;p&gt;Sometimes I need to prepare a presentation, there are a lot of tools I can use, like keynotes, powerpoint, latex. I used to use latex beamer, it can generate very beautiful slides, and there are a lot of themes to choos. But the latex source code is not easy to write and clear.&lt;/p&gt;
&lt;p&gt;I love markdown, which is very popular now, I want to write source code using markdown, and generate a pdf file as beautiful as beamer. There is a powerful tool can do this, it's pandoc(&lt;a href="http://johnmacfarlane.net/pandoc/"&gt;http://johnmacfarlane.net/pandoc/&lt;/a&gt;), it can convert one markup format to another, and support most of formats.&lt;/p&gt;
&lt;p&gt;Here I use pandoc to convert markdown to beamer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pandoc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Warsaw&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;beamer&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="n"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I specify theme &lt;code&gt;Warsaw&lt;/code&gt; to use with &lt;code&gt;-V&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;pandoc official website show how to wite markdown to producing slides:
&lt;a href="http://johnmacfarlane.net/pandoc/demo/example9/producing-slide-shows-with-pandoc.html"&gt;http://johnmacfarlane.net/pandoc/demo/example9/producing-slide-shows-with-pandoc.html&lt;/a&gt;&lt;/p&gt;</summary><category term="markdown"></category><category term="pandoc"></category><category term="tools"></category></entry><entry><title>config gevent on uwsgi</title><link href="http://zhangliyong.github.io/posts/2014/04/09/config-gevent-on-uwsgi.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/config-gevent-on-uwsgi.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;caution&lt;/strong&gt;: need gevent(&amp;gt;= 1.0), and uwsgi(&amp;gt;= 1.4)&lt;/p&gt;
&lt;p&gt;https://github.com/SiteSupport/gevent/downloads&lt;/p&gt;
&lt;p&gt;uwsgi install
https://uwsgi-docs.readthedocs.org/en/latest/Install.html&lt;/p&gt;
&lt;p&gt;https://uwsgi-docs.readthedocs.org/en/latest/Gevent.html&lt;/p&gt;</summary></entry><entry><title>fabric</title><link href="http://zhangliyong.github.io/posts/2014/04/09/fabric.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/fabric.html</id><summary type="html">&lt;p&gt;下面介绍python下的一个用于项目部署的工具&lt;a href="http://docs.fabfile.org/"&gt;fabric&lt;/a&gt;，要学习fabric推荐阅读其官方文档，&lt;/p&gt;
&lt;p&gt;本文给只给出一个简单的介绍及一些基本的功能。&lt;/p&gt;
&lt;p&gt;根据官方文档的介绍:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fabric is:&lt;/p&gt;
&lt;p&gt;A tool that lets you execute arbitrary Python functions via the command line;
A library of subroutines (built on top of a lower-level library) to make executing shell commands over SSH easy and Pythonic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先安装fabric &lt;code&gt;pip install fabric&lt;/code&gt;，安装完fabric之后，系统会多出fab命令。&lt;/p&gt;
&lt;p&gt;fab命令在执行时会读取当前目录下的fabfile.py文件，并根据fabric的参数来执行文件中的函数。&lt;/p&gt;
&lt;p&gt;fabfile.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;hello为一个task，执行hello如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fab&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们看到hello并没有参数，fab也支持给task加参数。&lt;/p&gt;
&lt;p&gt;fab可以用于项目部署，服务器管理。它可以通过ssh执行服务器上的shell命令，当然也可以执行本地的shell命令。&lt;/p&gt;
&lt;p&gt;例如： local执行本地命令，run执行服务器端命令，sudo以root权限执行服务器端命令。&lt;/p&gt;
&lt;p&gt;fab可以通过设置env.hosts变量来在所有host中执行某一task。&lt;/p&gt;
&lt;p&gt;fab也提供了一些decorator，如hosts, roles来设置在某些host上执行task。&lt;/p&gt;</summary></entry><entry><title>Find out which process open a linux port</title><link href="http://zhangliyong.github.io/posts/2014/04/09/find-out-which-process-open-a-linux-port.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/find-out-which-process-open-a-linux-port.html</id><summary type="html">&lt;p&gt;最近在调mongodb的性能，发现currentop中有很多长时间运行的查询，从currentop中可以看到查询来源ip:port。&lt;/p&gt;
&lt;p&gt;那么可以到ip机器上查询port对应的进程号，进而找到发出此查询的应用。&lt;/p&gt;
&lt;p&gt;根据port来查询进程号有多种方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;netstat， &lt;code&gt;sudo netstat -anp | grep &amp;lt;port&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于netstat的使用参考：http://www.thegeekstuff.com/2010/03/netstat-command-examples/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fuser，找到使用tcp 7000端口号的进程：&lt;code&gt;sudo fuser 7000/tcp&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lsof&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lsof&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;portNumber&lt;/span&gt;
&lt;span class="n"&gt;lsof&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;portNumber&lt;/span&gt;
&lt;span class="n"&gt;lsof&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;udp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;portNumber&lt;/span&gt;
&lt;span class="n"&gt;lsof&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这几种方式找到进程号后，可以利用&lt;code&gt;ps -eaf | grep &amp;lt;pid&amp;gt;&lt;/code&gt;找到此进程的执行命令，
并可以通过&lt;code&gt;/proc/&amp;lt;pid&amp;gt;/cwd&lt;/code&gt;找到此进程的执行目录。&lt;/p&gt;
&lt;p&gt;参考：http://www.cyberciti.biz/faq/what-process-has-open-linux-port/&lt;/p&gt;</summary></entry><entry><title>How mongodb use memory</title><link href="http://zhangliyong.github.io/posts/2014/04/09/how-mongodb-use-memory.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/how-mongodb-use-memory.html</id><summary type="html">&lt;p&gt;网络上经常有文章说mongo会需要大量内存，那么mongo到低需要多少内存。&lt;/p&gt;
&lt;p&gt;MongoDB实际需要的内存大小取决于working set的大小，working set是mongo完成操作所需要的所有文档及索引。对于一个collection而言，如果不需要访问每一条记录，不需要所有的记录都在内存中。working set最好都在内存中，以保证好的性能，如果不都在内存中会出现比较多的page fault。&lt;/p&gt;
&lt;p&gt;查看working set大小可用如下命令：&lt;code&gt;db.runCommand( { serverStatus: 1, workingSet: 1 } )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;serverStatus.mem.resident
The value of resident is roughly equivalent to the amount of RAM, in megabytes (MB), currently used by the database process. In normal use this value tends to grow. In dedicated database servers this number tends to approach the total amount of system memory.&lt;/p&gt;
&lt;p&gt;所以如果resident没有超出总的内存大小，此时内存是足够的，当然也要看一下page faults是不是很频繁。&lt;/p&gt;
&lt;p&gt;Does MongoDB require a lot of RAM?
Not necessarily. It’s certainly possible to run MongoDB on a machine with a small amount of free RAM.&lt;/p&gt;
&lt;p&gt;MongoDB automatically uses all free memory on the machine as its cache. System resource monitors show that MongoDB uses a lot of memory, but its usage is dynamic. If another process suddenly needs half the server’s RAM, MongoDB will yield cached memory to the other process.&lt;/p&gt;
&lt;p&gt;Technically, the operating system’s virtual memory subsystem manages MongoDB’s memory. This means that MongoDB will use as much free memory as it can, swapping to disk as needed. Deployments with enough memory to fit the application’s working data set in RAM will achieve the best performance.&lt;/p&gt;</summary></entry><entry><title>Job</title><link href="http://zhangliyong.github.io/posts/2014/04/09/job.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/job.html</id><summary type="html">&lt;p&gt;今天读了A. Jesse Jiryu Davis的一篇&lt;a href="http://emptysqua.re/blog/so-youre-coming-to-a-career-fair/"&gt;文章&lt;/a&gt;，关于计算机专业的学生如何让自己突出，找到
自己喜欢的工作。&lt;/p&gt;
&lt;p&gt;开篇作者就指出要想办法让自己突出，不要与其他学生都一样，如果你是一个黑客，那你就要表现出来。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;仅仅学校课堂学的东西是不够的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要有气质、魅力。&lt;/p&gt;
&lt;p&gt;好像计算机专业的学生不需要，错了！程序员也要和人交流，打交道，尤其是团队之间，如果你有魅力，会更容易和人交流，沟通效率更高。很多程序员也许都知道沟通的重要性，嘴上确说不需要，其实是在给自己找借口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;独立的项目，不一样的语言，不一样的课程&lt;/p&gt;
&lt;p&gt;如果有创意想法，就实现它，这将会给你增加很多的分数，
学一门其它的编程语言，不要只局限于课堂上教的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从长远来看，最好参与一些开源项目，一开始可能很难找到开源项目的一些问题，即使找到了，可能也写不出高质量的patch，可以先自己建立一个项目，自己开发。&lt;/p&gt;
&lt;p&gt;当然也有例外：你可以修改一些python的库，使其兼容python 3；或者将一种语言上热门的库移植到另一种语言上(在另一种语言上重新实现)，如果这个语言上还没有相应的库。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于我们在职的程序员，这些建议仍然适用，我们一定要有自己可拿出的东西来，有一些自己的项目，能与开源。&lt;/p&gt;
&lt;p&gt;非常重要的一点，一定要有气质、魅力，善于和另人交流，杜绝屌丝。还有程序员要注意身体哦。&lt;/p&gt;</summary></entry><entry><title>Logbook</title><link href="http://zhangliyong.github.io/posts/2014/04/09/logbook.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/logbook.html</id><summary type="html">&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Logbook是用来取代标准库logging的一个log系统，根据官方的介绍它让记log变的有趣，
logbook目前还处于开发阶段。可以参考官方&lt;a href="https://logbook.readthedocs.org/en/latest/features.html#core-features"&gt;core feature&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;logbook与logging差别比较大，logbook和logging基本都是由：logger, handler,
filter等组件组成，但是在logbook中这些组件之间的关系发生的根本的变化。并且logbook提供
了更多的组件，如：processor。&lt;/p&gt;
&lt;h2 id="new-feature"&gt;New Feature&lt;/h2&gt;
&lt;p&gt;在logbook中一个非常大的变化是大量使用&lt;a href="https://logbook.readthedocs.org/en/latest/stacks.html"&gt;stack&lt;/a&gt;,
一开始采用logging的方式去理解logbook，发现很不适应，真正去了解之后，发现这种方式有非常强的灵活性，
可以非常灵活的组织handler，而不用去处理handler与logger的有关系，将logger与handler解耦合。&lt;/p&gt;
&lt;p&gt;目前logbook中存在三种stack，分别用来存储Handler, Processor, Flag。
每一句log都会经过这三个stack中的每一个对象处理。假如目前存储handler的stack中目前
有两个handler h1, h2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;____&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;____&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;那每一句log都会被h1处理完后被h2再处理。&lt;/p&gt;
&lt;p&gt;Handler, Processor, Flag必须加到stack中才能启到作用，可以使用 &lt;code&gt;push_application()&lt;/code&gt; 及 &lt;code&gt;pop_application()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;logbook中也提供了&lt;code&gt;with&lt;/code&gt;来完成对stack的push和pop。&lt;/p&gt;
&lt;p&gt;logbook增加了很多的handler，甚至都有将log发到twitter上的handler。&lt;/p&gt;
&lt;p&gt;logbook有非常多的特性，相信以后也会增加更多有趣的特性，建议阅读其官方文档：https://logbook.readthedocs.org/en/latest/&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;下面给出一些简单的使用示例，有些是官方文档上给出的。&lt;/p&gt;
&lt;p&gt;开始使用logbook可以不用做任何配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logbook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;
&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;This is too cool for stdlib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;05&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;too&lt;/span&gt; &lt;span class="n"&gt;cool&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stdlib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码会将log记录到stderr中。是不是非常简单，都不需要设置handler，logbook有非常好的默认配置，
在很多情况下你不需要改动即可直接使用。&lt;/p&gt;
&lt;p&gt;使用handler：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logbook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;

&lt;span class="n"&gt;file_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;logbook.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;INFO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;file_handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;This is logged in a file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="testhandler"&gt;TestHandler&lt;/h3&gt;
&lt;p&gt;logbook提供了TestHandler，可以用来测试log，使用非常方便，参考文档：
https://logbook.readthedocs.org/en/latest/api/handlers.html#logbook.TestHandler&lt;/p&gt;
&lt;h3 id="mailhandler"&gt;MailHandler&lt;/h3&gt;
&lt;p&gt;https://logbook.readthedocs.org/en/latest/api/handlers.html#logbook.MailHandler
TODO&lt;/p&gt;
&lt;h3 id="threadedwrapperhandler"&gt;ThreadedWrapperHandler&lt;/h3&gt;
&lt;p&gt;https://logbook.readthedocs.org/en/latest/api/queues.html#logbook.queues.ThreadedWrapperHandler
TODO&lt;/p&gt;
&lt;h3 id="fingerscrossedhandler"&gt;FingersCrossedHandler&lt;/h3&gt;
&lt;p&gt;logbook提供了一个特殊的"fingers crossed" handler，这个handler作为一个wrapper，是用来封装其它
handler的，这个handler有一个特殊的功能，它会将所有的log记录到内存中，当某一些log的级别
(debug, info, warning, error)超过FingersCrossedHandler设置的级别时，所有在内存中的log以及后面的log
都将被记录到这个handler中。当log级别没有到达时，所有的log都不会被FingersCrossedHandler处理。&lt;/p&gt;
&lt;p&gt;这一handler很适合用在web application中，当某一错误产生时记录相关的request。&lt;/p&gt;
&lt;p&gt;FingersCrossedHandler默认设置的级别为ERROR&lt;/p&gt;
&lt;p&gt;下面给出两个示例代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logbook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FingersCrossedHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileHandler&lt;/span&gt;
&lt;span class="n"&gt;file_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FingersCrossedHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello error&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;会在bar.log文件中输出两句log&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logbook&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FingersCrossedHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileHandler&lt;/span&gt;
&lt;span class="n"&gt;file_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar.log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FingersCrossedHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello info&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hello info2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不会有任何log输出&lt;/p&gt;
&lt;p&gt;使用Processors&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inject_cwd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cwd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Processor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inject_cwd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# all logging calls inside this block in this thread will now&lt;/span&gt;
    &lt;span class="c"&gt;# have the current working directory information attached.&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;： Processor只有当log被某一个handler处理的时候才会执行，否则processor永远不会招待。&lt;/p&gt;</summary></entry><entry><title>misc</title><link href="http://zhangliyong.github.io/posts/2014/04/09/misc.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/misc.html</id><summary type="html">&lt;h1 id="mac-sshfs"&gt;Mac sshfs&lt;/h1&gt;
&lt;p&gt;Mac 挂载远程目录&lt;/p&gt;
&lt;p&gt;http://osxfuse.github.com/&lt;/p&gt;
&lt;p&gt;install OXSFUSE and SSHFS&lt;/p&gt;
&lt;h2 id="tf-idf"&gt;TF-IDF&lt;/h2&gt;
&lt;p&gt;http://www.ruanyifeng.com/blog/2013/03/tf-idf.html
http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html
http://www.ruanyifeng.com/blog/2013/03/automatic_summarization.html&lt;/p&gt;</summary></entry><entry><title>Mongo</title><link href="http://zhangliyong.github.io/posts/2014/04/09/mongo.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/mongo.html</id><summary type="html">&lt;h2 id="query-after-update-slow"&gt;query after update slow&lt;/h2&gt;
&lt;p&gt;这两天有一个接口的速度非常慢，主要是执行一条查询语句非常慢，有时耗时达200秒，于是找到了这条查询语句单独在mongo shell中执行，在mongo shell中执行并不慢，慢慢调试后最终找到问题，原因是在查询语句执行之前执行了两次更新语句。&lt;/p&gt;
&lt;p&gt;利用pymongo执行更新时，如果不设置safe=True，mongo会及时返回函数调用，但更新并没有真正执行完，mongo进程在后台继续执行，所以当接着执行查询时，此时更新没有结束，数据库会处于lock状态，查询等待数据库解锁，所以查询非常慢。&lt;/p&gt;
&lt;p&gt;把更新语句去除后，查询恢复正常。&lt;/p&gt;
&lt;h2 id="concurrency"&gt;Concurrency&lt;/h2&gt;
&lt;p&gt;MongoDB global lock to ga&lt;/p&gt;
&lt;h2 id="tips"&gt;Tips&lt;/h2&gt;
&lt;h3 id="if-write-heavy"&gt;If Write Heavy&lt;/h3&gt;
&lt;p&gt;Global Lock is Global
As you probably know, MongoDB has a global lock. The longer your writes take, the higher your lock percentage is. Updating documents that are in RAM is super fast.&lt;/p&gt;
&lt;p&gt;Updating documents that have been pushed to disk, first have to be read from disk, stored in memory, updated, then written back to disk. This operation is slow and happens while inside the lock.&lt;/p&gt;
&lt;p&gt;Updating a lot of random documents that rarely get updated and have been pushed out of RAM can lead to slow writes and a high lock percentage.&lt;/p&gt;
&lt;p&gt;More Reads Make For Faster Writes
The trick to lowering your lock percentage and thus having faster updates is to query the document you are going to update, before you perform the update. Querying before doing an upsert might seem counter intuitive at first glance, but it makes sense when you think about it.&lt;/p&gt;
&lt;p&gt;The read ensures that whatever document you are going to update is in RAM. This means the update, which will happen immediately after the read, always updates the document in RAM, which is super fast. I think of it as warming the database for the document you are about to update.&lt;/p&gt;
&lt;p&gt;http://www.mongotips.com/b/lower-lock-and-number-of-slow-queries/&lt;/p&gt;</summary></entry><entry><title>Mongo Performance</title><link href="http://zhangliyong.github.io/posts/2014/04/09/mongo-performance.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/mongo-performance.html</id><summary type="html">&lt;p&gt;最近mongo的性能&lt;/p&gt;</summary></entry><entry><title>Mongodb NUMA 导致的性能问题</title><link href="http://zhangliyong.github.io/posts/2014/04/09/mongodb-numa-dao-zhi-de-xing-neng-wen-ti.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/mongodb-numa-dao-zhi-de-xing-neng-wen-ti.html</id><summary type="html">&lt;p&gt;最近升级了mongodb，用mongo连接mongod后出现如下warning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;startup&lt;/span&gt; &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Mon&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;initandlisten&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Mon&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;initandlisten&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;NUMA&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Mon&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;initandlisten&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;          &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;suggest&lt;/span&gt; &lt;span class="n"&gt;launching&lt;/span&gt; &lt;span class="n"&gt;mongod&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;avoid&lt;/span&gt; &lt;span class="n"&gt;performance&lt;/span&gt; &lt;span class="n"&gt;problems&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Mon&lt;/span&gt; &lt;span class="n"&gt;Oct&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;initandlisten&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;              &lt;span class="n"&gt;numactl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;interleave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;mongod&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;随即查了下&lt;em&gt;NUMA&lt;/em&gt;是什么，有多篇文章均提到了NUMA会导致mongodb的性能问题，而且官方文档也有说明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To disable NUMA for MongoDB, use the numactl command and start mongod in the following manner:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;numactl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;interleave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mongod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Adjust the proc settings using the following command:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zone_reclaim_mode&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;To fully disable NUMA you must perform both operations. However, you can change zone_reclaim_mode without restarting mongod. For more information, see documentation on Proc/sys/vm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在此做一个整理：&lt;/p&gt;
&lt;p&gt;NUMA：NUMA是多核心CPU架构中的一种，其全称为Non-Uniform Memory Access，简单来说就是在多核心CPU中，机器的物理内存是分配给各个核的，架构简图如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="NUMA" src="http://jcole.us/blog/files/numa-architecture.png" /&gt;&lt;/p&gt;
&lt;p&gt;每个核访问分配给自己的内存会比访问分配给其它核的内存要快，有下面几种访问控制策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缺省(default)：总是在本地节点分配（分配在当前进程运行的节点上）；&lt;/li&gt;
&lt;li&gt;绑定(bind)：强制分配到指定节点上；&lt;/li&gt;
&lt;li&gt;交叉(interleave)：在所有节点或者指定的节点上交织分配；&lt;/li&gt;
&lt;li&gt;优先(preferred)：在指定节点上分配，失败则在其他节点上分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面文章中最后使用numactl –interleave命令就是指定其为交叉共享模式。&lt;/p&gt;
&lt;p&gt;我们知道虚拟内存机制是通过一个中断信号来通知虚拟内存系统进行内存swap的，所以这个irqbalance进程忙，是一个危险信号，在这里是由于在进行频繁的内存交换。这种频繁交换现象称为swap insanity，在MySQL中经常提到，也就是在NUMA框架中，采用不合适的策略，导致核心只能从指定内存块节点上分配内存，即使总内存还有富余，也会由于当前节点内存不足时产生大量的swap操作。&lt;/p&gt;
&lt;h3 id="install"&gt;Install&lt;/h3&gt;
&lt;p&gt;在Ubuntu下以numactl的命令启动mongodb，要先安装numactl&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;numactl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;参考：&lt;/h3&gt;
&lt;p&gt;http://docs.mongodb.org/manual/administration/production-notes/#production-numa&lt;/p&gt;
&lt;p&gt;http://huoding.com/2011/08/09/104&lt;/p&gt;
&lt;p&gt;http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/&lt;/p&gt;
&lt;p&gt;http://blog.nosqlfan.com/html/2772.html&lt;/p&gt;</summary><category term="MongoDB"></category><category term="DB"></category></entry><entry><title>MongoDB Replication Set</title><link href="http://zhangliyong.github.io/posts/2014/04/09/mongodb-replication-set.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/mongodb-replication-set.html</id><summary type="html"></summary><category term="MongoDB"></category><category term=""></category></entry><entry><title>munin</title><link href="http://zhangliyong.github.io/posts/2014/04/09/munin.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/munin.html</id><summary type="html">&lt;h2 id="writing-plugins"&gt;Writing plugins&lt;/h2&gt;
&lt;p&gt;global attribute: http://munin-monitoring.org/wiki/protocol-config&lt;/p&gt;
&lt;p&gt;redis munin 有改动，总是说Redis找不到，一会儿一下问题，做一个patch&lt;/p&gt;
&lt;p&gt;mulitgraph: http://munin-monitoring.org/wiki/protocol-multigraph&lt;/p&gt;
&lt;h2 id="fw_conntract-fw_forwarded_local-timeout"&gt;fw_conntract fw_forwarded_local timeout&lt;/h2&gt;
&lt;p&gt;配置好munin之后，fw_conntrack总是报警，读不到数据，主要原因是执行fw_conntrack超时，munin plugin的默认超时时间是10s，超时主要是因为&lt;code&gt;cat /proc/net/ip_conntrack&lt;/code&gt;，对于网络请求少的服务器，此语句会很快执行完，但对于网络请求比较多的服务器，此语句耗时可能要超过30s。&lt;/p&gt;
&lt;p&gt;Google的相应问题，此问题早已被人解决，解决方案见如下链接：
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=565565&lt;/p&gt;
&lt;p&gt;主要就是用&lt;code&gt;conntrack -L&lt;/code&gt; 代替&lt;code&gt;cat /proc/net/ip_conntrack&lt;/code&gt;，要先安装&lt;code&gt;sudo apt-get install conntrack&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="limits"&gt;limits&lt;/h2&gt;
&lt;p&gt;limit 用于检查每个plugin的field的值是否超出设定的warning和critical，并做出相应的警报。&lt;/p&gt;
&lt;p&gt;warning和critical是运行插件config输出的每个filed的warning和critical来设置的。&lt;/p&gt;
&lt;p&gt;有时我们在&lt;code&gt;/etc/munin/plugin-conf.d/&lt;/code&gt;中会看到&lt;code&gt;env.warning value&lt;/code&gt;，这是因为插件会读取&lt;code&gt;env.warning&lt;/code&gt;的值，并根据此值设置每个field的warning。如果插件不读取&lt;code&gt;env.warning&lt;/code&gt;的值，即使设置也不会启作用，munin不会自动设置。&lt;/p&gt;
&lt;p&gt;关于warning, critical的设置可参考: &lt;a href="http://munin-monitoring.org/wiki/fieldname.warning"&gt;{fieldname}.warning&lt;/a&gt;, &lt;a href="http://munin-monitoring.org/wiki/fieldname.critical"&gt;{fieldname}.critical}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;http://munin-monitoring.org/wiki/protocol-config&lt;/p&gt;
&lt;p&gt;http://munin-monitoring.org/wiki/munin-man#munin-html&lt;/p&gt;</summary></entry><entry><title>Mysql 性能调优</title><link href="http://zhangliyong.github.io/posts/2014/04/09/mysql-xing-neng-diao-you.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/mysql-xing-neng-diao-you.html</id><summary type="html">&lt;h2 id="thread-cache-size"&gt;thread cache size&lt;/h2&gt;
&lt;p&gt;http://www.dbasquare.com/kb/mysql-and-thread-cache-size/&lt;/p&gt;
&lt;p&gt;query_cache_type可以设置为0(OFF)，1(ON)或者2(DEMOND)，分别表示完全不使用query cache，除显式要求不使用query cache（使用sql_no_cache）之外的所有的select都使用query cache，只有显示要求才使用query cache（使用sql_cache)&lt;/p&gt;
&lt;p&gt;show global status like '';
show global variables like '';&lt;/p&gt;
&lt;p&gt;innodb_file_per_table&lt;/p&gt;
&lt;p&gt;mysql io 延时计算&lt;/p&gt;
&lt;h2 id="mysql-backup"&gt;mysql backup&lt;/h2&gt;
&lt;p&gt;相较前几种方法，备份数据文件最为直接、快速、方便，缺点是基本上不能实现增量备份。为了保证数据的一致性，需要在靠背文件前，执行以下 SQL 语句：&lt;/p&gt;
&lt;p&gt;FLUSH TABLES WITH READ LOCK;
也就是把内存中的数据都刷新到磁盘中，同时锁定数据表，以保证拷贝过程中不会有新的数据写入。这种方法备份出来的数据恢复也很简单，直接拷贝回原来的数据库目录下即可。&lt;/p&gt;
&lt;p&gt;注意，对于 Innodb 类型表来说，还需要备份其日志文件，即 ib_logfile* 文件。因为当 Innodb 表损坏时，就可以依靠这些日志文件来恢复。&lt;/p&gt;
&lt;p&gt;Innodb 表则可以通过执行以下语句来整理碎片，提高索引速度：&lt;/p&gt;
&lt;p&gt;ALTER TABLE tbl_name ENGINE = Innodb;
这其实是一个 NULL 操作，表面上看什么也不做，实际上重新整理碎片了。&lt;/p&gt;
&lt;p&gt;为了不影响线上业务，实现在线备份，并且能增量备份，最好的办法就是采用主从复制机制(replication)，在 slave 机器上做备份。&lt;/p&gt;
&lt;h2 id="mysql-replication"&gt;mysql replication&lt;/h2&gt;
&lt;h3 id="switch-master-and-slave"&gt;switch master and slave&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;one slave and one master&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Master: set read lock
          FLUSH TABLES WITH READ LOCK;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slave: show processlist;  when you see 'Has read all relay log', it means the slave is updated with master.
         stop slave; reset master;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;chane the code to operate on slave;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Master: UNLOCK TABLES;
          make the old master to be a slave;
          change master to MASTER_HOST = '10.18.10.21', MASTER_USER = 'sns', MASTER_PASSWORD = '123';&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[mysqld]
log-bin=mysql-bin
server-id=1
After making the changes, restart the server.&lt;/p&gt;
&lt;p&gt;Note
If you omit server-id (or set it explicitly to its default value of 0), a master refuses connections from all slaves.&lt;/p&gt;
&lt;p&gt;Note
For the greatest possible durability and consistency in a replication setup using InnoDB with transactions, you should use innodb_flush_log_at_trx_commit=1 and sync_binlog=1 in the master my.cnf file.&lt;/p&gt;
&lt;p&gt;Note
Ensure that the skip-networking option is not enabled on your replication master. If networking has been disabled, your slave will not able to communicate with the master and replication will fail.&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;After connecting to the server as root, you can add new accounts. The following statements use GRANT to set up four new accounts:&lt;/p&gt;
&lt;p&gt;mysql&amp;gt; CREATE USER 'monty'@'localhost' IDENTIFIED BY 'some_pass';
mysql&amp;gt; GRANT ALL PRIVILEGES ON &lt;em&gt;.&lt;/em&gt; TO 'monty'@'localhost'
    -&amp;gt;     WITH GRANT OPTION;
mysql&amp;gt; CREATE USER 'monty'@'%' IDENTIFIED BY 'some_pass';
mysql&amp;gt; GRANT ALL PRIVILEGES ON &lt;em&gt;.&lt;/em&gt; TO 'monty'@'%'
    -&amp;gt;     WITH GRANT OPTION;
mysql&amp;gt; CREATE USER 'admin'@'localhost';
mysql&amp;gt; GRANT RELOAD,PROCESS ON &lt;em&gt;.&lt;/em&gt; TO 'admin'@'localhost';
mysql&amp;gt; CREATE USER 'dummy'@'localhost';
The accounts created by these statements have the following properties:&lt;/p&gt;
&lt;p&gt;Two of the accounts have a user name of monty and a password of some_pass. Both accounts are superuser accounts with full privileges to do anything. The 'monty'@'localhost' account can be used only when connecting from the local host. The 'monty'@'%' account uses the '%' wildcard for the host part, so it can be used to connect from any host.&lt;/p&gt;
&lt;p&gt;It is necessary to have both accounts for monty to be able to connect from anywhere as monty. Without the localhost account, the anonymous-user account for localhost that is created by mysql_install_db would take precedence when monty connects from the local host. As a result, monty would be treated as an anonymous user. The reason for this is that the anonymous-user account has a more specific Host column value than the 'monty'@'%' account and thus comes earlier in the user table sort order. (user table sorting is discussed in Section 6.2.4, “Access Control, Stage 1: Connection Verification”.)&lt;/p&gt;
&lt;p&gt;The 'admin'@'localhost' account has no password. This account can be used only by admin to connect from the local host. It is granted the RELOAD and PROCESS administrative privileges. These privileges enable the admin user to execute the mysqladmin reload, mysqladmin refresh, and mysqladmin flush-xxx commands, as well as mysqladmin processlist . No privileges are granted for accessing any databases. You could add such privileges later by issuing other GRANT statements.&lt;/p&gt;
&lt;p&gt;The 'dummy'@'localhost' account has no password. This account can be used only to connect from the local host. No privileges are granted. It is assumed that you will grant specific privileges to the account later.&lt;/p&gt;
&lt;p&gt;The statements that create accounts with no password will fail if the NO_AUTO_CREATE_USER SQL mode is enabled. To deal with this, use an IDENTIFIED BY clause that specifies a nonempty password.&lt;/p&gt;
&lt;p&gt;To check the privileges for an account, use SHOW GRANTS:&lt;/p&gt;
&lt;p&gt;mysql&amp;gt; SHOW GRANTS FOR 'admin'@'localhost';
+-----------------------------------------------------+
| Grants for admin@localhost                          |
+-----------------------------------------------------+
| GRANT RELOAD, PROCESS ON &lt;em&gt;.&lt;/em&gt; TO 'admin'@'localhost' |
+-----------------------------------------------------+&lt;/p&gt;
&lt;p&gt;16.1.1.5. Creating a Data Snapshot Using mysqldump  :  http://dev.mysql.com/doc/refman/5.1/en/replication-howto-mysqldump.html&lt;/p&gt;
&lt;p&gt;Obtaining the Replication Master Binary Log Coordinates : http://dev.mysql.com/doc/refman/5.1/en/replication-howto-masterstatus.html&lt;/p&gt;
&lt;p&gt;If a slave uses the default host-based relay log file names, changing a slave's host name after replication has been set up can cause replication to fail with the errors Failed to open the relay log and Could not find target log during relay log initialization. This is a known issue (see Bug #2122). If you anticipate that a slave's host name might change in the future (for example, if networking is set up on the slave such that its host name can be modified using DHCP), you can avoid this issue entirely by using the --relay-log and --relay-log-index options to specify relay log file names explicitly when you initially set up the slave. This will make the names independent of server host name changes.&lt;/p&gt;</summary></entry><entry><title>nginx tips</title><link href="http://zhangliyong.github.io/posts/2014/04/09/nginx-tips.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/nginx-tips.html</id><summary type="html">&lt;h2 id="nginx-backlog"&gt;nginx backlog&lt;/h2&gt;
&lt;h2 id="root-directory"&gt;Root Directory&lt;/h2&gt;
&lt;p&gt;nginx 默认根目录，&lt;/p&gt;
&lt;p&gt;如果在配置文件中指定了root，则根目录即为root指定的目录&lt;/p&gt;
&lt;p&gt;如果通过编译安装的nginx，则根目录为编译时指定的prefix目录&lt;/p&gt;
&lt;p&gt;如果通过包管理器安装，则根目录与发行版相关。例如ubuntu版本的根目录为：
/usr/share/nginx/www&lt;/p&gt;
&lt;h2 id="custome-error-page"&gt;Custome error page&lt;/h2&gt;
&lt;p&gt;nginx 有个默认的错误显示页面&lt;/p&gt;
&lt;h2 id="ref"&gt;Ref&lt;/h2&gt;
&lt;p&gt;http://wiki.nginx.org/Pitfalls&lt;/p&gt;</summary></entry><entry><title>pelican</title><link href="http://zhangliyong.github.io/posts/2014/04/09/pelican.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/pelican.html</id><summary type="html">&lt;h2 id="_1"&gt;介绍&lt;/h2&gt;
&lt;p&gt;peclian 是一个python版本的表态页面生成器，类似于jekyll&lt;/p&gt;</summary></entry><entry><title>PuDB</title><link href="http://zhangliyong.github.io/posts/2014/04/09/pudb.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/pudb.html</id><summary type="html">&lt;p&gt;https://pypi.python.org/pypi/pudb&lt;/p&gt;</summary></entry><entry><title>Python</title><link href="http://zhangliyong.github.io/posts/2014/04/09/python.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/python.html</id><summary type="html">&lt;h2 id="decorator"&gt;decorator&lt;/h2&gt;
&lt;h2 id="class-method"&gt;class method&lt;/h2&gt;
&lt;h1 id="django"&gt;Django&lt;/h1&gt;
&lt;h2 id="django-test"&gt;Django test&lt;/h2&gt;
&lt;p&gt;ref: http://mikegrouchy.com/blog/great-django-test-talks.html&lt;/p&gt;</summary></entry><entry><title>python build Dynamic Link Library</title><link href="http://zhangliyong.github.io/posts/2014/04/09/python-build-dynamic-link-library.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/python-build-dynamic-link-library.html</id><summary type="html">&lt;p&gt;当我们安装某些软件，需要链接python的动态库时，如果系统的python版本是静态库的，会提示如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/usr/bin/ld: .../lib/libpython2.7.a(abstract.o): relocation R_X86_64_32 against 'a local symbol' can not be used when making a shared object; recompile with -fPIC
.../lib/libpython2.7.a: could not read symbols: Bad value
collect2: ld returned 1 exit status&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种情况需要安装动态库版本。&lt;/p&gt;
&lt;p&gt;下面介绍自己编译安装动态库的python版本。&lt;/p&gt;
&lt;h2 id="_1"&gt;安装&lt;/h2&gt;
&lt;p&gt;通过ubuntu软件库安装的python版本带有动态链接库，位置为&lt;code&gt;/usr/lib/libpython&amp;lt;version&amp;gt;.so&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;如果系统中默认的python版本太低，软件库中又没有高版本时，需要手动编译安装。&lt;/p&gt;
&lt;p&gt;下面以python2.7.4为例，其它版本类似&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./configure
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;默认情况下，&lt;code&gt;make&lt;/code&gt;会在当前目录下编译生成一个libpython2.7.a的静态链接库。&lt;/p&gt;
&lt;p&gt;如果要生成动态链接库，我们需要在&lt;code&gt;configure&lt;/code&gt;命令后加选项&lt;code&gt;--enable-shared&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Building a shared libpython&lt;/p&gt;
&lt;p&gt;Starting with Python 2.3, the majority of the interpreter can be built
into a shared library, which can then be used by the interpreter
executable, and by applications embedding Python. To enable this feature,
configure with --enable-shared.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --enable-shared
&lt;span class="nv"&gt;$ &lt;/span&gt;make
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过这种方式会生成动态链接库，并安装到系统库目录下,地址：&lt;code&gt;/usr/local/lib/libpython2.7.so&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在make的过程可能会失败，提示如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/usr/bin/ld: .../lib/libpython2.7.a(abstract.o): relocation R_X86_64_32 against 'a local symbol' can not be used when making a shared object; recompile with -fPIC
.../lib/libpython2.7.a: could not read symbols: Bad value
collect2: ld returned 1 exit status&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因是系统链接库目前下存在一个表态链接库&lt;code&gt;libpython2.7.a&lt;/code&gt;，可能是之前安装的，&lt;/p&gt;
&lt;p&gt;对于这种情况，我们要把系统原有的Python库的路径从编译参数中除去，让链接器先搜索当前目前，当前路径为”.”，通过设置LDFLAGS，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --enable-shared &lt;span class="nv"&gt;LDFLAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-L.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时建议：如果你之前运行过&lt;code&gt;make&lt;/code&gt;，那么在下一次运行&lt;code&gt;make&lt;/code&gt;之前，运行&lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装完成之后运行&lt;code&gt;python&lt;/code&gt;，可能会提示如下错误：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ImportError: libpython2.7.so.1.0: cannot open shared object file: No such file or directory&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是因为新安装的动态链接库&lt;code&gt;libpython2.7.so&lt;/code&gt;并不在系统的cache中。&lt;/p&gt;
&lt;p&gt;Linux上需要链接动态库时，系统会从cache文件（/etc/ld.so.cache）中找到此链接库。&lt;/p&gt;
&lt;p&gt;此时需要运行 &lt;code&gt;sudo ldconfig&lt;/code&gt;更新cache。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.cbug.org/2011/11/21/multiple-python-versions-cause-shared-library-mess.html"&gt;http://www.cbug.org/2011/11/21/multiple-python-versions-cause-shared-library-mess.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/huzhenwei/article/details/7339548"&gt;http://blog.csdn.net/huzhenwei/article/details/7339548&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://linux.101hacks.com/unix/ldconfig/"&gt;http://linux.101hacks.com/unix/ldconfig/&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Pythonbrew</title><link href="http://zhangliyong.github.io/posts/2014/04/09/pythonbrew.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/pythonbrew.html</id><summary type="html">&lt;p&gt;home page: https://github.com/utahta/pythonbrew&lt;/p&gt;
&lt;h2 id="install-packages-over-pythonbrew"&gt;install packages over pythonbrew&lt;/h2&gt;
&lt;p&gt;pythonbrew can install multiple python versions on the same machine,
if you want to install packages over a specified python version, a
recommand way is to install pip first.&lt;/p&gt;
&lt;h3 id="install-pip"&gt;install pip&lt;/h3&gt;
&lt;p&gt;home page: http://www.pip-installer.org/en/latest/&lt;/p&gt;
&lt;p&gt;pip is just a python pacakge&lt;/p&gt;
&lt;p&gt;first use pythonbrew switch to the desired python version, then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//raw.github.com/pypa/pip/master/contrib/get-pip.py&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after that you can use pip to install whatever pacakges over the python version.&lt;/p&gt;
&lt;p&gt;If you want to install package on a different python version, re-do "install pip" section.&lt;/p&gt;</summary></entry><entry><title>Read Later</title><link href="http://zhangliyong.github.io/posts/2014/04/09/read-later.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/read-later.html</id><summary type="html">&lt;h2 id="python"&gt;Python&lt;/h2&gt;
&lt;p&gt;Python Guide: http://docs.python-guide.org/en/latest/index.html&lt;/p&gt;
&lt;p&gt;字符串匹配的KMP算法: http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html&lt;/p&gt;</summary></entry><entry><title>Sleeping</title><link href="http://zhangliyong.github.io/posts/2014/04/09/sleeping.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/sleeping.html</id><summary type="html">&lt;h2 id="_1"&gt;关于睡眠你应该知道的十件事&lt;/h2&gt;
&lt;p&gt;地址：http://v.163.com/movie/2013/5/V/Q/M8TDTH9BJ_M8TE2FFVQ.html&lt;/p&gt;
&lt;p&gt;网易分开课上有一期bbc拍摄的关于睡眠的记录片，里面提到了很多关于提高睡眠的问题，
对于一些自己感觉有帮助的记录如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;咖啡和洒精都会影响人的睡眠；咖啡会让人难以入睡，酒精会容易让人入睡，但会缩深度睡眠阶段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于经常跨时区的人来说，睡眠也是个大问题，对于这种情况，可以尝试16小时不吃饭，可以喝水，到达目的地后，在当地的正常用餐时间用餐，按照当地的饮食时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经常性的紧张也会影响睡眠，在睡觉前在床上适当做一些放松肌肉的锻炼，先做一些动作让肌肉紧张再放松。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;饮食也会影响睡觉，如果多食含蛋白质少的东西会影响发困，多食蛋白质多的会让人清醒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;气味也能促进人的睡眠，睡前喝薰衣草泡的茶及闻薰衣草的气味会有得睡眠。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;睡觉前一小时泡个热水澡有利于睡眠。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>ssd-vs-hhd</title><link href="http://zhangliyong.github.io/posts/2014/04/09/ssd-vs-hhd.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/ssd-vs-hhd.html</id><summary type="html">&lt;p&gt;随机MongoDB的数据量增大，我们服务器的磁盘利用率不数据增加，一度接近100%，而且
Disk IO成为MongoDB的性能瓶颈，在进行sharding之前，我们决定先迁移到使用SSD的服务
器，下面我利用 &lt;code&gt;mongoperf&lt;/code&gt; 工具对HHD和SSD的 R/W 进行了一个测评。&lt;/p&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/8931586.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;##Read

    echo "{nThreads:32,fileSizeMB:2000,r:true}" | ./bin/mongoperf

###HHD
    new thread, total running : 32
    2093 ops/sec 8 MB/sec
    1963 ops/sec 7 MB/sec
    2010 ops/sec 7 MB/sec
    2044 ops/sec 7 MB/sec
    2061 ops/sec 8 MB/sec
    2011 ops/sec 7 MB/sec


###SSD
    new thread, total running : 32
    37804 ops/sec 147 MB/sec
    33013 ops/sec 128 MB/sec
    36563 ops/sec 142 MB/sec
    38056 ops/sec 148 MB/sec
    39058 ops/sec 152 MB/sec
    39036 ops/sec 152 MB/sec
    32946 ops/sec 128 MB/sec
    42343 ops/sec 165 MB/sec
    40949 ops/sec 159 MB/sec


##Write

    echo "{nThreads:32,fileSizeMB:2000,w:true}" | ./bin/mongoperf

###HHD
    new thread, total running : 32
    3 ops/sec 0 MB/sec
    485 ops/sec 1 MB/sec
    1543 ops/sec 6 MB/sec
    679 ops/sec 2 MB/sec
    1059 ops/sec 4 MB/sec
    1383 ops/sec 5 MB/sec
    674 ops/sec 2 MB/sec
    740 ops/sec 2 MB/sec
    572 ops/sec 2 MB/sec
    679 ops/sec 2 MB/sec
    0 ops/sec 0 MB/sec
    1134 ops/sec 4 MB/sec

###SSD
    new thread, total running : 32
    read:0 write:1
    993 ops/sec 3 MB/sec
    2160 ops/sec 8 MB/sec
    312 ops/sec 1 MB/sec
    493 ops/sec 1 MB/sec
    7570 ops/sec 29 MB/sec
    10026 ops/sec 39 MB/sec
    3120 ops/sec 12 MB/sec
    514 ops/sec 2 MB/sec
    903 ops/sec 3 MB/sec
    1503 ops/sec 5 MB/sec
    2413 ops/sec 9 MB/sec
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;可以看到HHD的读取速度为6-7MB/s，SSD的为150MB/s左右，为HHD的20多倍。&lt;/p&gt;
&lt;p&gt;再看写的速度，HHD最高为6MB/s，SSD最高为39MB/s，为HHD的6倍多。&lt;/p&gt;
&lt;p&gt;使用SSD后，可以大大减小Disk IO的延时，提高MongoDB响应速度，
但SSD的价格比较高，如果学着SSD性价比低，可以配置sharding。&lt;/p&gt;</summary><category term="mongodb"></category><category term="ssd"></category><category term="hhd"></category><category term="disk"></category></entry><entry><title>The python packages I love</title><link href="http://zhangliyong.github.io/posts/2014/04/09/the-python-packages-i-love.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/the-python-packages-i-love.html</id><summary type="html">&lt;p&gt;gevent:&lt;/p&gt;
&lt;p&gt;arrow: Better dates &amp;amp; times for Python https://github.com/crsmithdev/arrow http://crsmithdev.com/arrow&lt;/p&gt;
&lt;p&gt;requests: &lt;/p&gt;
&lt;p&gt;grequests:&lt;/p&gt;
&lt;p&gt;undead: https://github.com/waawal/undead&lt;/p&gt;
&lt;p&gt;legit
envoy
tablib
clint
autoenv&lt;/p&gt;</summary></entry><entry><title>TIME_WAIT in netstat</title><link href="http://zhangliyong.github.io/posts/2014/04/09/time_wait-in-netstat.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/time_wait-in-netstat.html</id><summary type="html">&lt;p&gt;netstat -tanp | grep -o '(10.18.10.20\|211.151.139.230\|127.0.0.1):[0-9]*' | sort -nr | uniq -c | sort -nr -k 1 | wc -l&lt;/p&gt;</summary></entry><entry><title>TODO</title><link href="http://zhangliyong.github.io/posts/2014/04/09/todo.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/todo.html</id><summary type="html">&lt;h2 id="2013-05-08"&gt;2013-05-08&lt;/h2&gt;
&lt;h3 id="todo-today"&gt;TODO TODAY&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;蕃茄工作法做笔记（思维导图）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总结peclian&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;mysql replication, mysql 索引树&lt;/p&gt;</summary></entry><entry><title>transfer munin server</title><link href="http://zhangliyong.github.io/posts/2014/04/09/transfer-munin-server.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/transfer-munin-server.html</id><summary type="html">&lt;p&gt;当修改某一node的主机名时，修改后此node的所有历史记录都会消失，可以恢复这些历史数据，在munin中所有数据都保存在rrd文件中，此文件在/var/lib/munin中，如：social/services.social-uptime-uptime-g.rrd 是主机名为services.social的其中一个数据文件。当修改了node的主机名时，只需要同时对数据文件重命名即可。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取消munin crontab的执行， cd /etc/cron.d/; sudo mv munin munin.disable
    crontab不会执行/etc/cron.d/下文件名中带有“.”的文件&lt;/li&gt;
&lt;li&gt;生命名数据文件&lt;/li&gt;
&lt;li&gt;修改munin配置/etc/munin/munin.conf中的node主机名&lt;/li&gt;
&lt;li&gt;修改munin crontab执行，5分钟后将会看到更新的结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;： 改动数据文件前要先取消crontab的执行，否则可能会影响历史数据, 同时数据文件迁移之后，要保证用户munin有对这些rrd文件写的权限。因为用&lt;code&gt;sudo cp&lt;/code&gt;之后会改变这些文件的owner.&lt;/p&gt;
&lt;p&gt;如果要将munin server转移到其它机器，只需要将rrd数据文件复制过去即可。&lt;/p&gt;</summary></entry><entry><title>urwid</title><link href="http://zhangliyong.github.io/posts/2014/04/09/urwid.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/urwid.html</id><summary type="html">&lt;p&gt;最近要写一个mongo current op的管理工具，&lt;/p&gt;
&lt;p&gt;http://www.nicosphere.net/urwid-for-python-a-ncurses-library-2541/&lt;/p&gt;
&lt;p&gt;https://github.com/intnull/videotop/blob/master/videotop.py&lt;/p&gt;
&lt;p&gt;Why can't I select text in an Urwid program?&lt;/p&gt;
&lt;p&gt;By default Urwid's MainLoop tells the terminal that it will handle mouse input so it can react to things like selecting widgets with the mouse or activating check boxes.&lt;/p&gt;
&lt;p&gt;If you wrote this program and you want to disable Urwid's mouse handling you can set handle_mouse=False when creating your MainLoop or screen object.&lt;/p&gt;
&lt;p&gt;Or you can just hold the SHIFT key while clicking and dragging in to get the normal select text/copy behavior.&lt;/p&gt;</summary></entry><entry><title>vim</title><link href="http://zhangliyong.github.io/posts/2014/04/09/vim.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/vim.html</id><summary type="html">&lt;p&gt;TODO: wrap my plugins&lt;/p&gt;
&lt;h2 id="auto-reload-vimrc"&gt;auto reload .vimrc&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;augroup&lt;/span&gt; &lt;span class="n"&gt;reload_vimrc&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; {&lt;/span&gt;
    &lt;span class="n"&gt;autocmd&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
    &lt;span class="n"&gt;autocmd&lt;/span&gt; &lt;span class="n"&gt;BufWritePost&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;MYVIMRC&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;MYVIMRC&lt;/span&gt;
&lt;span class="n"&gt;augroup&lt;/span&gt; &lt;span class="n"&gt;END&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;http://www.bestofvim.com/tip/auto-reload-your-vimrc/&lt;/p&gt;</summary></entry><entry><title>vmstat</title><link href="http://zhangliyong.github.io/posts/2014/04/09/vmstat.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/vmstat.html</id><summary type="html">&lt;p&gt;最近在分析mongo的性能问题，发现mongo所在机器的io比较频繁。&lt;/p&gt;
&lt;p&gt;使用vmstat命令查看，发现b（The number of processes in uninterruptible sleep）这一列的数量比较大，持续在4左右。
随后查询uninterruptible sleep状态的意义，引自：http://www.novell.com/support/kb/doc.php?id=7002725&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Processes in a "D" or uninterruptible sleep state are usually waiting on I/O. The ps command shows a "D" on processes in an uninterruptible sleep state. The vmstat command also shows the current processes that are "blocked" or waiting on I/O. The vmstat and ps will not agree on the number of processes in a "D" state, so don't be too concerned. You cannot kill "D" state processes, even with SIGKILL or kill -9. As the name implies, they are uninterruptible. You can only clear them by rebooting the server or waiting for the I/O to respond. It is normal to see processes in a "D" state when the server performs I/O intensive operations. &lt;/p&gt;
&lt;p&gt;If performance becomes an issue, you may need to check the health of your disks. Make sure your firmware and kernel disk drivers are updated. &lt;/p&gt;
&lt;p&gt;In the example above, there is heavy disk activity shown in the "io" columns and the server is currently swapping to disk. The example more likely represents a memory issue, rather than a disk I/O issue. &lt;/p&gt;
&lt;p&gt;There are two ways to find more about the processes in D state.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ps -eo ppid,pid,user,stat,pcpu,comm,wchan:32
This prints a list of all processes where in the last column either a '-' is displayed when the process is running or the name of the kernel function in which the process is sleeping if the process is currently sleeping. This includes also processes which are interruptible. Processes that are in uninterruptible sleep can be determined via the fourth column which would then show a D.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;echo w &amp;gt; /proc/sysrq-trigger
This command produces a report and a list of all processes in D state and a full kernel stack trace to /var/log/messages. This shows much more information than the first option described above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于vmstat的使用参考：http://www.linuxintheshell.org/2013/05/22/episode-030-vmstat/&lt;/p&gt;</summary></entry><entry><title>wsgi</title><link href="http://zhangliyong.github.io/posts/2014/04/09/wsgi.html" rel="alternate"></link><updated>2014-04-09T10:10:53+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/wsgi.html</id><summary type="html">&lt;p&gt;http://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/&lt;/p&gt;
&lt;p&gt;http://webpython.codepoint.net/wsgi_request_parsing_post&lt;/p&gt;
&lt;p&gt;http://blog.pythonisito.com/2012/08/building-web-applications-with-gevents.html&lt;/p&gt;</summary></entry><entry><title>Bash</title><link href="http://zhangliyong.github.io/posts/2014/04/09/bash.html" rel="alternate"></link><updated>2014-04-09T10:10:52+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/bash.html</id><summary type="html">&lt;h2 id="alias"&gt;alias&lt;/h2&gt;
&lt;p&gt;对于一些比较常用的长命令可以用alias做一个别名，以后可以直接用别名操作。&lt;/p&gt;
&lt;p&gt;e.g. 在.bashrc中加入&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;servername&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssh sns@hostname&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;servername
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即可登陆到hostname机器。&lt;/p&gt;
&lt;h2 id="rsync"&gt;rsync&lt;/h2&gt;
&lt;p&gt;大家常用rsync同步数据，有些数据是不需要同步的，可以用 --exclude 选项。&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsync -avz --exclude &lt;span class="s2"&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; --exclude &lt;span class="s2"&gt;&amp;quot;dbconfig.py&amp;quot;&lt;/span&gt; src user@hostname:/dest

--exclude &lt;span class="s2"&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; 不会同步以&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;开头的文件或文件夹，不会同步.git目录（.git目录是比较大的，不建议同步）。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="mail"&gt;mail&lt;/h2&gt;
&lt;p&gt;所有crontab任务的运行结果都会输出到mail中，可以随时查看每个任务的运行情况。&lt;/p&gt;
&lt;h2 id="tmux"&gt;tmux&lt;/h2&gt;
&lt;p&gt;工作中经常ssh到远程服务器，有时需要在远程服务器中开启多个终端，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种办法是在本地开启多个终端，分别远程到服务器。&lt;/li&gt;
&lt;li&gt;还有一种方式是利用&lt;a href="http://tmux.sourceforge.net/"&gt;tmux&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;install:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$sudo&lt;/span&gt; apt-get install tmux
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;basic usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;detach&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;tmux&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tmux 的功能非常强，但命令较多，学习成本较高，可以先使用上面几个命令。&lt;/p&gt;
&lt;p&gt;推荐介绍视频: http://happycasts.net/episodes/41?autoplay=true&lt;/p&gt;
&lt;h2 id="ssh"&gt;ssh&lt;/h2&gt;
&lt;p&gt;今天搞清楚了ssh的标准输入输出，下面是ssh命令的使用方式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1246&lt;/span&gt;&lt;span class="n"&gt;AaCfgKkMNnqsTtVvXxYy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;bind_address&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;cipher_spec&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bind_address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;escape_char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;configfile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;pkcs11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;identity_file&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bind_address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;hostport&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;login_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;mac_spec&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;ctl_cmd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bind_address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;hostport&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;ctl_path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;local_tun&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;remote_tun&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后的&lt;code&gt;command&lt;/code&gt;是在&lt;code&gt;hostname&lt;/code&gt;机器上执行&lt;code&gt;command&lt;/code&gt;命令，那么&lt;code&gt;command&lt;/code&gt;命令的标准输入输出是远程机器&lt;code&gt;hostname&lt;/code&gt;上，还是在本地机器上？ 很多初学者可能会认为是远程机器的标准输入输出（本人以前也是这么认为的），其实是在本地机器上。&lt;/p&gt;
&lt;p&gt;下面我们做个试验，可以在本地执行远程机器的程序并获得输出结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;local host&amp;quot;&lt;/span&gt; | ssh user@hostname &lt;span class="s2"&gt;&amp;quot;(echo server; cat; echo server)&amp;quot;&lt;/span&gt;
server
&lt;span class="nb"&gt;local &lt;/span&gt;host
server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们用将"local host"输出到标准输出，在hostname机器上&lt;code&gt;cat&lt;/code&gt;从标准输入获取"local host"并再次输出到标准输出(本地机器的标准输出)。&lt;/p&gt;
&lt;p&gt;虽然&lt;code&gt;command&lt;/code&gt;中的标准输入输出是在本地机器，但&lt;code&gt;command&lt;/code&gt;中的命令和目录等都是相对于hostname的，与本地机器无法。&lt;/p&gt;
&lt;p&gt;fuser&lt;/p&gt;</summary></entry><entry><title>Git</title><link href="http://zhangliyong.github.io/posts/2014/04/09/git.html" rel="alternate"></link><updated>2014-04-09T10:10:52+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/git.html</id><summary type="html">&lt;h2 id="basic"&gt;Basic&lt;/h2&gt;
&lt;p&gt;使用Git前，要先理解三个概念（与其它的VCS不同）：working directory, index, repository.&lt;/p&gt;
&lt;h3 id="working-directory"&gt;working directory&lt;/h3&gt;
&lt;p&gt;即是你当前的工作目录，你所编辑的文件都在此目录下。&lt;/p&gt;
&lt;h3 id="index"&gt;index&lt;/h3&gt;
&lt;h2 id="git-add"&gt;git add&lt;/h2&gt;
&lt;h2 id="git-flow"&gt;Git Flow&lt;/h2&gt;
&lt;p&gt;http://danielkummer.github.com/git-flow-cheatsheet/&lt;/p&gt;
&lt;h2 id="git-submodules"&gt;Git submodules&lt;/h2&gt;
&lt;p&gt;http://git-scm.com/docs/gitignore
http://git-scm.com/docs/git-check-ignore.html&lt;/p&gt;</summary></entry><entry><title>Problems I encouter with emacs</title><link href="http://zhangliyong.github.io/posts/2014/04/09/problems-i-encouter-with-emacs.html" rel="alternate"></link><updated>2014-04-09T10:10:52+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/problems-i-encouter-with-emacs.html</id><summary type="html">&lt;p&gt;emacs with zsh&lt;/p&gt;
&lt;p&gt;when I first open zsh in emacs using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It always print strange characters like "4m", that's because I don't have eterm-color terminfo,
I solve this problem by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# If you use Cocoa Emacs or Carbon Emacs&lt;/span&gt;
&lt;span class="n"&gt;tic&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminfo&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Applications&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Emacs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Contents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Resources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;eterm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ti&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in terminal.&lt;/p&gt;
&lt;p&gt;ref: http://stackoverflow.com/questions/8918910/weird-character-zsh-in-emacs-terminal&lt;/p&gt;</summary></entry><entry><title>Redis vs Mongodb</title><link href="http://zhangliyong.github.io/posts/2014/04/09/redis-vs-mongodb.html" rel="alternate"></link><updated>2014-04-09T10:10:52+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-04-09:posts/2014/04/09/redis-vs-mongodb.html</id><summary type="html">&lt;p&gt;Redis and MongoDB insertion performance analysis: http://blog.axant.it/archives/236
MongoDB and Redis: a different interpretation of what's wrong with Relational DBs: http://oldblog.antirez.com/post/MongoDB-and-Redis.html&lt;/p&gt;</summary></entry><entry><title>Graphviz Tutorial</title><link href="http://zhangliyong.github.io/posts/2014/02/23/graphviz-tutorial.html" rel="alternate"></link><updated>2014-02-24T11:05:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-23:posts/2014/02/23/graphviz-tutorial.html</id><summary type="html">&lt;p&gt;When I write something, I'd like to use graphes, graph is a great way to explain ideas, it can save a lot of words, and express more clearlly.&lt;/p&gt;
&lt;p&gt;Is there a good tool which make you drawing graphes like programming, yes there is, the great &lt;a href="http://graphviz.org/"&gt;Graphviz&lt;/a&gt;. The first time I saw it, I was shocked by its powerful, it can draw some many kinds of beautiful graphes. You can learn graphviz through its &lt;a href="http://graphviz.org/"&gt;offcial website&lt;/a&gt;, the documents there are a little hard for newbies, and as a know there is no much toturials for graphviz when I'm writting this, so I want to write a tutorial for it. More people need to know this tool.&lt;/p&gt;
&lt;h2 id="what-is-graphviz"&gt;What is Graphviz&lt;/h2&gt;
&lt;p&gt;From offcial website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Graphviz is open source graph visualization software. Graph visualization is a way of representing structural information as diagrams of abstract graphs and networks. It has important applications in networking, bioinformatics,  software engineering, database and web design, machine learning, and in visual interfaces for other technical domains. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="demo" src="http://graphviz.org/Gallery/directed/cluster.png" /&gt;&lt;/p&gt;
&lt;p&gt;Graphviz package shiped with some programs and libs, the programs can take descriptions of graphs in a text language(&lt;a href="http://graphviz.org/content/dot-language"&gt;The DOT Language&lt;/a&gt;)), and generate graphs in various useful formats, like png, svg, pdf, ps. Graphviz has many userful features, you can custome colors, fonts, styles.&lt;/p&gt;
&lt;p&gt;I will introduce to you two command line programs, &lt;code&gt;dot&lt;/code&gt; and &lt;code&gt;neato&lt;/code&gt;. They are enough for general use, if you have special needs, look into the &lt;a href="http://graphviz.org/Documentation.php"&gt;documents&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="dot-neato"&gt;dot, neato&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dot&lt;/code&gt; : a utility program for drawing directed graphs. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;neato&lt;/code&gt; : a utility program for drawing undirected graphs.&lt;/p&gt;
&lt;p&gt;They have the same usages. Run &lt;code&gt;dot -?&lt;/code&gt; for help.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dot&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Tsvg&lt;/span&gt; &lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;dot&lt;/code&gt; take &lt;code&gt;hello_world.dot&lt;/code&gt; as input, and generate svg file &lt;code&gt;hello_world.svg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-T&lt;/code&gt; option takes graph format, you can assign other formats, like png, pdf, ps.&lt;/p&gt;
&lt;p&gt;hello_world.dot:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/9169048.js?file=hello_world.dot'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;digraph hello
{
       n1 [label="Hello"]
       n2 [label="World!"]

       n1 -&gt; n2
}&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;hello_world.svg:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hello World" src="http://zhangliyong.github.io/images/graphviz/hello_world.svg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hello_world.dot&lt;/code&gt; is a description in dot language.&lt;/p&gt;
&lt;h2 id="the-dot-language"&gt;The DOT Language&lt;/h2&gt;
&lt;p&gt;Now I introduce &lt;a href="http://graphviz.org/content/dot-language"&gt;the dot language&lt;/a&gt; to you.&lt;/p&gt;
&lt;p&gt;Grammar defination:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/9169048.js?file=dot-lang.md'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;Terminals are shown in bold font and nonterminals in italics. Literal characters are given in single quotes. Parentheses ( and ) indicate grouping when needed. Square brackets [ and ] enclose optional items. Vertical bars | separate alternatives.

&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;graph&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;[ &lt;b&gt;strict&lt;/b&gt; ] (&lt;b&gt;graph&lt;/b&gt; | &lt;b&gt;digraph&lt;/b&gt;) [ &lt;i&gt;ID&lt;/i&gt; ] &lt;b&gt;'{'&lt;/b&gt; &lt;i&gt;stmt_list&lt;/i&gt; &lt;b&gt;'}'&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;stmt_list&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;[ &lt;i&gt;stmt&lt;/i&gt; [ &lt;b&gt;';'&lt;/b&gt; ] [ &lt;i&gt;stmt_list&lt;/i&gt; ] ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;stmt&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;node_stmt&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;|&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;edge_stmt&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;|&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;attr_stmt&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;|&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;ID&lt;/i&gt; &lt;b&gt;'='&lt;/b&gt; &lt;i&gt;ID&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;|&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;subgraph&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;attr_stmt&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;(&lt;b&gt;graph&lt;/b&gt; | &lt;b&gt;node&lt;/b&gt; | &lt;b&gt;edge&lt;/b&gt;) &lt;i&gt;attr_list&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;attr_list&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;b&gt;'['&lt;/b&gt; [ &lt;i&gt;a_list&lt;/i&gt; ] &lt;b&gt;']'&lt;/b&gt; [ &lt;i&gt;attr_list&lt;/i&gt; ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;a_list&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;ID&lt;/i&gt; &lt;b&gt;'='&lt;/b&gt; &lt;i&gt;ID&lt;/i&gt; [ (&lt;b&gt;';'&lt;/b&gt; | &lt;b&gt;','&lt;/b&gt;) ] [ &lt;i&gt;a_list&lt;/i&gt; ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;edge_stmt&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;(&lt;i&gt;node_id&lt;/i&gt; | &lt;i&gt;subgraph&lt;/i&gt;) &lt;i&gt;edgeRHS&lt;/i&gt; [ &lt;i&gt;attr_list&lt;/i&gt; ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;edgeRHS&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;edgeop&lt;/i&gt; (&lt;i&gt;node_id&lt;/i&gt; | &lt;i&gt;subgraph&lt;/i&gt;) [ &lt;i&gt;edgeRHS&lt;/i&gt; ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;node_stmt&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;node_id&lt;/i&gt; [ &lt;i&gt;attr_list&lt;/i&gt; ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;node_id&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;i&gt;ID&lt;/i&gt; [ &lt;i&gt;port&lt;/i&gt; ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;port&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;b&gt;':'&lt;/b&gt; &lt;i&gt;ID&lt;/i&gt; [ &lt;b&gt;':'&lt;/b&gt; &lt;i&gt;compass_pt&lt;/i&gt; ]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;|&lt;/td&gt;
  &lt;td align="LEFT"&gt;&lt;b&gt;':'&lt;/b&gt; &lt;i&gt;compass_pt&lt;/i&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;subgraph&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;[ &lt;b&gt;subgraph&lt;/b&gt; [ &lt;i&gt;ID&lt;/i&gt; ] ] &lt;b&gt;'{'&lt;/b&gt; &lt;i&gt;stmt_list&lt;/i&gt; &lt;b&gt;'}'&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td align="RIGHT"&gt;&lt;i&gt;compass_pt&lt;/i&gt;&lt;/td&gt;
  &lt;td align="LEFT"&gt;:&lt;/td&gt;
  &lt;td align="LEFT"&gt;(&lt;b&gt;n&lt;/b&gt; | &lt;b&gt;ne&lt;/b&gt; | &lt;b&gt;e&lt;/b&gt; | &lt;b&gt;se&lt;/b&gt; | &lt;b&gt;s&lt;/b&gt; | &lt;b&gt;sw&lt;/b&gt; | &lt;b&gt;w&lt;/b&gt; | &lt;b&gt;nw&lt;/b&gt; | &lt;b&gt;c&lt;/b&gt; | &lt;b&gt;_&lt;/b&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;br /&gt;

An ID is one of the following:

&lt;ul&gt;
&lt;li&gt; Any string of alphabetic (&lt;tt&gt;[a-zA-Z\200-\377]&lt;/tt&gt;) characters, underscores (&lt;tt&gt;'_'&lt;/tt&gt;) or
digits (&lt;tt&gt;[0-9]&lt;/tt&gt;), not beginning with a digit;
&lt;/li&gt;&lt;li&gt; a numeral [&lt;tt&gt;-&lt;/tt&gt;]&lt;sup&gt;?&lt;/sup&gt;(&lt;tt&gt;.&lt;/tt&gt;[&lt;tt&gt;0&lt;/tt&gt;-&lt;tt&gt;9&lt;/tt&gt;]&lt;sup&gt;+&lt;/sup&gt;  | [&lt;tt&gt;0&lt;/tt&gt;-&lt;tt&gt;9&lt;/tt&gt;]&lt;sup&gt;+&lt;/sup&gt;(&lt;tt&gt;.&lt;/tt&gt;[&lt;tt&gt;0&lt;/tt&gt;-&lt;tt&gt;9&lt;/tt&gt;]&lt;sup&gt;*&lt;/sup&gt;)&lt;sup&gt;?&lt;/sup&gt; ); 
&lt;/li&gt;&lt;li&gt; any double-quoted string ("...") possibly containing escaped 
quotes ('")&lt;sup&gt;1&lt;/sup&gt;;
&lt;/li&gt;&lt;li&gt; an &lt;a name="html"&gt;HTML string&lt;/a&gt; (&amp;lt;...&amp;gt;).
&lt;/li&gt;&lt;/ul&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;It's pretty abstract and not clear for newbies.
I'll explain to you by examples, once you understand these grammars, you can draw graphes freely.&lt;/p&gt;
&lt;h3 id="we-start-with-hello_worlddot"&gt;We start with &lt;code&gt;hello_world.dot&lt;/code&gt;,&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * graph: [ strict ] (graph | digraph) [ ID ] &amp;#39;{&amp;#39; stmt_list &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * hello is ID, the body is the &amp;quot;stmt_list&amp;quot;&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="n"&gt;digraph&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="cm"&gt;/* node_stmt: node_id [ attr_list ]&lt;/span&gt;
&lt;span class="cm"&gt;        * node_id: ID [ port ]&lt;/span&gt;
&lt;span class="cm"&gt;        * attr_list :&amp;#39;[&amp;#39; [ a_list ] &amp;#39;]&amp;#39; [ attr_list ]&lt;/span&gt;
&lt;span class="cm"&gt;        * a_list: ID &amp;#39;=&amp;#39; ID [ (&amp;#39;;&amp;#39; | &amp;#39;,&amp;#39;) ] [ a_list ]&lt;/span&gt;
&lt;span class="cm"&gt;        * &lt;/span&gt;
&lt;span class="cm"&gt;        * n1 is ID of a node_id&lt;/span&gt;
&lt;span class="cm"&gt;        * &amp;#39;[label=&amp;quot;Hello&amp;quot;]&amp;#39; is attr_list&lt;/span&gt;
&lt;span class="cm"&gt;        * &amp;#39;label=&amp;quot;Hello&amp;quot;&amp;#39; is a_list&lt;/span&gt;
&lt;span class="cm"&gt;        */&lt;/span&gt;
       &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
       &lt;span class="n"&gt;n2&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

       &lt;span class="cm"&gt;/* edge_stmt: (node_id | subgraph) edgeRHS [ attr_list ]&lt;/span&gt;
&lt;span class="cm"&gt;        * edgeRHS: edgeop (node_id | subgraph) [ edgeRHS ]&lt;/span&gt;
&lt;span class="cm"&gt;        * &lt;/span&gt;
&lt;span class="cm"&gt;        * &amp;#39;n1&amp;#39; is node_id&lt;/span&gt;
&lt;span class="cm"&gt;        * &amp;#39;-&amp;gt; n2&amp;#39; is edgeRHS&lt;/span&gt;
&lt;span class="cm"&gt;        * &amp;#39;-&amp;gt;&amp;#39; is edgeop&lt;/span&gt;
&lt;span class="cm"&gt;        * &amp;#39;n2&amp;#39; is node_id&lt;/span&gt;
&lt;span class="cm"&gt;        */&lt;/span&gt;
       &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An edgeop is "-&amp;gt;" in directed graphs and "--" in undirected graphs.&lt;/p&gt;
&lt;h3 id="next-we-add-attr-to-graph"&gt;Next we add attr to graph&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;attr_stmt&lt;/span&gt;   &lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;attr_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;attr: &lt;a href="http://graphviz.org/content/attrs"&gt;http://graphviz.org/content/attrs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;node-shapes: &lt;a href="http://graphviz.org/content/node-shapes"&gt;http://graphviz.org/content/node-shapes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;arrow-shapes: &lt;a href="http://graphviz.org/content/arrow-shapes"&gt;http://graphviz.org/content/arrow-shapes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;colors: &lt;a href="http://graphviz.org/doc/info/colors.html"&gt;http://graphviz.org/doc/info/colors.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="ref"&gt;Ref&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://graphviz.org/"&gt;http://graphviz.org/&lt;/a&gt;
&lt;a href="http://www.linuxjournal.com/article/7275?page=0,0"&gt;http://www.linuxjournal.com/article/7275?page=0,0&lt;/a&gt;&lt;/p&gt;</summary><category term="Tools"></category><category term="Graphviz"></category><category term="Tutorial"></category></entry><entry><title>MongoDB Index Internals</title><link href="http://zhangliyong.github.io/posts/2014/02/19/mongodb-index-internals.html" rel="alternate"></link><updated>2014-02-22T10:29:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-19:posts/2014/02/19/mongodb-index-internals.html</id><summary type="html">
&lt;p&gt;As we all know MongoDB use B-tree to create indexes, here I'll show the deep view of MongoDB indexes.&lt;/p&gt;
&lt;h2 id="b-tree"&gt;B-tree&lt;/h2&gt;
&lt;p&gt;First, an overview of B-tree.&lt;/p&gt;
&lt;p&gt;From wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computer science, a B-tree is a tree data structure that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time. The B-tree is a generalization of a binary search tree in that a node can have more than two children (Comer 1979, p. 123). Unlike self-balancing binary search trees, the B-tree is optimized for systems that read and write large blocks of data. It is commonly used in databases and filesystems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A B-tree of order 2 or order 5:&lt;/p&gt;
&lt;p&gt;&lt;img alt="btree" src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/65/B-tree.svg/500px-B-tree.svg.png" title="A B-tree of order 2 or order 5."/&gt;&lt;/p&gt;
&lt;p&gt;Internal nodes can have vary number of keys, vary between $d$ and $2d$, the factor of $2$ can guarantee that nodes can be split and combined, and still conform to the upper and lower limit.&lt;/p&gt;
&lt;p&gt;All leaf nodes have the same depth.&lt;/p&gt;
&lt;p&gt;Definition from wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;According to Knuth's definition, a B-tree of order m is a tree which satisfies the following properties:&lt;/p&gt;
&lt;p&gt;Every node has at most m children. &lt;br/&gt;
Every non-leaf node (except root) has at least ⌈m⁄2⌉ children.  &lt;br/&gt;
The root has at least two children if it is not a leaf node.  &lt;br/&gt;
A non-leaf node with k children contains k−1 keys.  &lt;br/&gt;
All leaves appear in the same level, and internal vertices carry no information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="mongodb-index-b-tree"&gt;MongoDB Index B-tree&lt;/h2&gt;
&lt;p&gt;In this section, I will show you mongo index btree.&lt;/p&gt;
&lt;p&gt;From &lt;a href="https://github.com/mongodb/mongo/blob/master/src/mongo/db/structure/btree/btree.h"&gt;btree.h&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The nodes of our btree are referred to as buckets below.  These buckets are of size BucketSize and their body is an ordered array of &lt;bson disk="" key,="" loc=""&gt; pairs, where disk loc is the disk location of a document and bson key is a projection of this document into the schema of the index for this btree.  Ordering is determined on the basis of bson key first and then disk loc in case of a tie.  All bson keys for a btree have identical schemas with empty string field names and may not have an objsize() exceeding KeyMax.  The btree's buckets are themselves organized into an ordered tree.&lt;/bson&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is what btree looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="index btree" src="https://www.evernote.com/shard/s30/sh/58663d76-cf6f-4944-943b-fb850f3084b1/3bc5e37b28b267f8cd2e374e99d0d59c/deep/0/Btree.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;When the btree is serialized on the disk, every bucket is stored as a record, like a document in a collection. Each bucket has a fixed size 8192, but with 16 byte to store record header. See &lt;a href="http://zhangliyong.github.io/posts/2014/02/18/mongodb-storage-internals.html"&gt;mongo storage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bucket store keynode and keydata, this is what bucket looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="index bucket" src="https://www.evernote.com/shard/s30/sh/3a7cb4c5-d387-4335-b1b4-920d7510091e/33b58b26c816e9621cd556325ceeb8d2/deep/0/From-Skitch.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;prevChildBucket&lt;/code&gt; is a pointer, point to the left child bucket of this key. &lt;code&gt;kdo&lt;/code&gt; points to the key data of this key. &lt;code&gt;recordLoc&lt;/code&gt; points to the location of the key's doucment.&lt;/p&gt;
&lt;p&gt;keynode is a struct, and has a fixed size.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Loc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;__KeyNode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;     * The 'left' child bucket of this key.  If this is the i-th key, it&lt;/span&gt;
&lt;span class="cm"&gt;     * points to the i index child bucket.&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
    &lt;span class="n"&gt;Loc&lt;/span&gt; &lt;span class="n"&gt;prevChildBucket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/** The location of the record associated with this key. */&lt;/span&gt;
    &lt;span class="n"&gt;Loc&lt;/span&gt; &lt;span class="n"&gt;recordLoc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/** Offset within current bucket of the variable width bson key for this _KeyNode. */&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;_kdo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The size of keydata varies, with upper limit 1024 bytes.&lt;/p&gt;
&lt;p&gt;When insert a new key to a bucket, keynode is inserted from left, and keydata is insert from right.&lt;/p&gt;
&lt;p&gt;Bucket format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;hhhh&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;kkkkkkk&lt;/span&gt;&lt;span class="err"&gt;————&lt;/span&gt;&lt;span class="n"&gt;bbbbbbbbbbbuuubbbuubbb&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
 &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;KeyNode&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
 &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bson&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
 &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unused&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;bson&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;garbage&lt;/span&gt; &lt;span class="n"&gt;collected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how many keys can be stored in a bucket depends on keydata size. MongoDB allows to store 1024 keys at most. When the bucket is full, or has 1024 keys, it will be splited.&lt;/p&gt;
&lt;p&gt;keydata is a projection of a document into the schema of the index. For an index, the schema is fixed, so keydata does not need to contain fieldNames. If a document does not have a field, then the fileValue will be null in keydata.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sparse:&lt;/strong&gt;
When create a sparse index, only when the document does not have all the fields of the index, it will be ignore, if one of the fields exists, it will be indexed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;index:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;documents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;d1:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;Tom&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;          &lt;span class="n"&gt;keydata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="nl"&gt;d2:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;          &lt;span class="n"&gt;keydata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="nl"&gt;d3:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;Jerry&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CA&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="n"&gt;keydata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Jerry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;
&lt;span class="nl"&gt;d4:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CA&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;      &lt;span class="n"&gt;keydata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If create the index with sparse as true, the document &lt;code&gt;d4&lt;/code&gt; will not be indexed.&lt;/p&gt;
&lt;h3 id="indexstats"&gt;IndexStats&lt;/h3&gt;
&lt;p&gt;MongoDB 2.4 ships with a &lt;code&gt;indexStats&lt;/code&gt; command, the command can be run only on a mongod instance that uses the &lt;code&gt;--enableExperimentalIndexStatsCmd&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;To aggregate statistics, issue the command like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;db.runCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;indexStats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;collection&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;index name&amp;gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/B-tree"&gt;http://en.wikipedia.org/wiki/B-tree&lt;/a&gt;
&lt;a href="https://github.com/mongodb/mongo/blob/master/src/mongo/db/structure/btree/btree.h"&gt;https://github.com/mongodb/mongo/blob/master/src/mongo/db/structure/btree/btree.h&lt;/a&gt;
&lt;a href="https://github.com/mongodb/mongo/blob/master/src/mongo/db/structure/btree/btree.cpp"&gt;https://github.com/mongodb/mongo/blob/master/src/mongo/db/structure/btree/btree.cpp&lt;/a&gt;&lt;/p&gt;</summary><category term="MongoDB"></category><category term="Index"></category><category term="B-Tree"></category></entry><entry><title>MongoDB Index</title><link href="http://zhangliyong.github.io/posts/2014/02/19/mongodb-index.html" rel="alternate"></link><updated>2014-02-19T13:47:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-19:posts/2014/02/19/mongodb-index.html</id><summary type="html">&lt;p&gt;本文我们讨论一下一些特殊查询对索引的使用情况。&lt;/p&gt;
&lt;p&gt;Test data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rs0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;PRIMARY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;52fda635720bcc4ea4bb961c&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test_name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5304412b720bcc4ea4bb9627&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;5304430b720bcc4ea4bb9628&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;rs0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;PRIMARY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ensureIndex&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;rs0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;PRIMARY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ensureIndex&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="exists-null"&gt;$exists, null&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// not use index {name: 1}&lt;/span&gt;
&lt;span class="nl"&gt;rs0:&lt;/span&gt;&lt;span class="no"&gt;PRIMARY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nl"&gt;exists:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;52fda635720bcc4ea4bb961c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test_name&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5304430b720bcc4ea4bb9628&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;{$exists: true}&lt;/code&gt; will not use index &lt;code&gt;{name: 1}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// use index {name: 1}&lt;/span&gt;
&lt;span class="nl"&gt;rs0:&lt;/span&gt;&lt;span class="no"&gt;PRIMARY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nl"&gt;exists:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5304412b720bcc4ea4bb9627&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;{$exists: false}&lt;/code&gt; can use the index &lt;code&gt;{name: 1}&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// use index {name: 1}&lt;/span&gt;
&lt;span class="nl"&gt;rs0:&lt;/span&gt;&lt;span class="no"&gt;PRIMARY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5304412b720bcc4ea4bb9627&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5304430b720bcc4ea4bb9628&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The doucment without &lt;code&gt;name&lt;/code&gt; filed also show up. So when create an index on a field without &lt;code&gt;sparse&lt;/code&gt; option, if an document without the filed, it will also be indexed in the index with the filed value as &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;explain()&lt;/code&gt; on the two query, the &lt;code&gt;indexBounds&lt;/code&gt; of the output are the same. They both use index &lt;code&gt;{name: 1}&lt;/code&gt;, and have the same time complexity, only the outputs are different.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;nscannedObjects&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;nscanned&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;indexBounds&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
                &lt;span class="err"&gt;[&lt;/span&gt;
                        &lt;span class="kt"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="kt"&gt;null&lt;/span&gt;
                &lt;span class="cp"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="ne"&gt;$ne&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// use index {b: 1}&lt;/span&gt;
&lt;span class="nl"&gt;rs0:&lt;/span&gt;&lt;span class="no"&gt;PRIMARY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nl"&gt;ne:&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;52fda635720bcc4ea4bb961c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test_name&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5304430b720bcc4ea4bb9628&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;explain():&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;indexBounds&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;
                &lt;span class="err"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;$minElement&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="cp"&gt;[&lt;/span&gt;
                        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="s2"&gt;&amp;quot;$maxElement&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="cp"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;_id&lt;/code&gt; is output by default for any query, so if you want an query to be indexOnly, you need to specify &lt;code&gt;_id: 0&lt;/code&gt; on return fields.&lt;/p&gt;</summary><category term="MongoDB"></category><category term="Index"></category><category term="B-Tree"></category></entry><entry><title>MongoDB Journal</title><link href="http://zhangliyong.github.io/posts/2014/02/18/mongodb-journal.html" rel="alternate"></link><updated>2014-02-18T16:30:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-18:posts/2014/02/18/mongodb-journal.html</id><summary type="html">&lt;p&gt;启用journal后，MongoDB的操作先写到journal buffer中，每100ms MongoDB会flush journal buffer到磁盘journal中，此时数据不会丢失，&lt;/p&gt;
&lt;p&gt;若MongoDB crash，则最多会丢失100ms的数据。&lt;/p&gt;
&lt;h2 id="journal-files"&gt;Journal Files&lt;/h2&gt;
&lt;p&gt;mongod启动后，会在 &lt;code&gt;dbpath&lt;/code&gt; 下新建一个 &lt;code&gt;journal&lt;/code&gt; 目录，这个目录下存放所有的journal文件，journal 文件是append-only，而且文件名以 &lt;code&gt;j._&lt;/code&gt; 为前缀，每个journal文件的大小为1GB，当journal超过1GB后，会创建新的journal文件，当MongoDB将journal中的所写操作应用到数据文件后，这些journal文件才会被删除。&lt;/p&gt;
&lt;p&gt;journal文件的格式为：&lt;/p&gt;
&lt;p&gt;&lt;img alt="journal" src="https://www.evernote.com/shard/s30/sh/1da95a5d-e676-4d26-9526-4c88a0f99c6d/55ab60012797fe9541233b5835db1f18/deep/0/MongoDB-London-2013-Understanding-MongoDB-Storage-for-Performance-a....png" /&gt;&lt;/p&gt;
&lt;h2 id="how-journal-works"&gt;How Journal Works&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 此部分翻译自： http://www.kchodorow.com/blog/2012/10/04/how-mongodbs-journaling-works/&lt;/p&gt;
&lt;p&gt;首先磁盘上存储了 journal files和data files，如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="journal files and data files" src="http://www.kchodorow.com/blog/wp-content/uploads/2012/10/mapfile.png" /&gt;&lt;/p&gt;
&lt;p&gt;当启动mongod后，会将data files映射到shared view，并返回其在内存的虚拟地址。例如：数据文件大小为2,000 bytes，操作系统将其映射到内存地址1,000,000-1,002,000，如果你访问地址1,000,042，那你会得到数据文件中从第42个字节开始的数据。（当然操作系统不会把所有数据都load到内存中，只有当你访问到时，才会放到内存中.）&lt;/p&gt;
&lt;p&gt;&lt;img alt="shared view" src="http://www.kchodorow.com/blog/wp-content/uploads/2012/10/to_shared.png" /&gt;&lt;/p&gt;
&lt;p&gt;shared view由文件直接映射，当修改了内存中的数据后，OS会将修改flush到对应的数据文件中。这是在没有journal的情况下mongod的工作方式，mongod会每60s将内存中的修改flush到磁盘。&lt;/p&gt;
&lt;p&gt;如果启用了journal，mongod会再做一次映射，将shared view映射到private view，这就是为什么启用journal后虚拟内存的使用量翻倍。&lt;/p&gt;
&lt;p&gt;&lt;img alt="private view" src="http://www.kchodorow.com/blog/wp-content/uploads/2012/10/to_private.png" /&gt;&lt;/p&gt;
&lt;p&gt;由于private view是由shared view映射来，所以private view的改动不能直接flush到硬盘。&lt;/p&gt;
&lt;p&gt;当mongod进行写操作时，会修改private view。&lt;/p&gt;
&lt;p&gt;&lt;img alt="write" src="http://www.kchodorow.com/blog/wp-content/uploads/2012/10/write.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后mongod会将这些改动的描述写到journal file, 在journal file中记录哪些文件的哪些字节被修改。&lt;/p&gt;
&lt;p&gt;改动的描述会被追加到journal file之后。&lt;/p&gt;
&lt;p&gt;&lt;img alt="journalled" src="http://www.kchodorow.com/blog/wp-content/uploads/2012/10/journalled.png" /&gt;&lt;/p&gt;
&lt;p&gt;这时写操作被持久化，不会丢失。如果mongod crash，虽然改动没记录到data file中，journal还可以replay这部分改动。&lt;/p&gt;
&lt;p&gt;接下来journal会replay shared view中的改动。&lt;/p&gt;
&lt;p&gt;&lt;img alt="toshared" src="http://www.kchodorow.com/blog/wp-content/uploads/2012/10/toshared.png" /&gt;&lt;/p&gt;
&lt;p&gt;然后mongod再重新将shared view映射到private view中，防止private view中有太多的改动。&lt;/p&gt;
&lt;p&gt;&lt;img alt="remap" src="http://www.kchodorow.com/blog/wp-content/uploads/2012/10/remap.png" /&gt;&lt;/p&gt;
&lt;p&gt;最后，shared view中的改动flush后硬盘中。默认情况下mongod会要求OS每60s flush一次。每次flush完后，会将journal中flush过的改动删除。&lt;/p&gt;
&lt;p&gt;&lt;img alt="flushed" src="http://www.kchodorow.com/blog/wp-content/uploads/2012/10/flushed.png" /&gt;&lt;/p&gt;
&lt;p&gt;这就是journal的工作原理。感谢Richard，他给的解释是我听过的最好的（今年秋季他还会&lt;a href="http://education.10gen.com/courses/10gen/M101/2012_Fall/about"&gt;在线教授 MongoDB&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id="cost-of-a-journal"&gt;Cost of a Journal&lt;/h2&gt;
&lt;p&gt;使用journal后写操作的性能会降低5-30%。&lt;/p&gt;
&lt;p&gt;对于写操作非常频繁的系统建议journal files和data files使用不同的物理磁盘，它们都会flush数据到磁盘，若使用同一个会使用Disk IO延时增大，降低性能。&lt;/p&gt;
&lt;p&gt;对于以读为主的系统，不会有太多影响。&lt;/p&gt;
&lt;h2 id="_1"&gt;参考&lt;/h2&gt;
&lt;p&gt;http://www.slideshare.net/mongodb/mongodb-london-2013understanding-mongodb-storage-for-performance-and-data-safety-by-christian-kvalheim-10gen&lt;/p&gt;
&lt;p&gt;http://www.kchodorow.com/blog/2012/10/04/how-mongodbs-journaling-works/&lt;/p&gt;</summary><category term="MongoDB"></category></entry><entry><title>MongoDB mmap</title><link href="http://zhangliyong.github.io/posts/2014/02/18/mongodb-mmap.html" rel="alternate"></link><updated>2014-02-18T15:12:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-18:posts/2014/02/18/mongodb-mmap.html</id><summary type="html">&lt;p&gt;MongoDB 使用系统调用 &lt;code&gt;mmap&lt;/code&gt; 将数据文件映射到内存，然后直接操作内存。&lt;/p&gt;
&lt;p&gt;这样简化了MongoDB的开发，可以省去复杂的内存及磁盘操作相关的代码，完全不用关心文件系统的类型，OS会自动cache数据，并使用LRU的方式，而且MongoDB重启后可以继续使用cache中的数据。&lt;/p&gt;
&lt;p&gt;当然也会有缺点，数据文件碎片(fragmentation)会影响内存的使用，而且操作系统的 &lt;code&gt;read-ahead&lt;/code&gt; 也会影响内存的使用，对于索引数据来说，cache的LRU方式并不合适，索引数据最好一直在内存中。&lt;/p&gt;
&lt;p&gt;MongoDB 进程的虚拟内存 &lt;code&gt;virtual size = total files size + overhead(connections, heap)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果MongoDB启动时启用了journal，则virtual size会翻倍。&lt;/p&gt;
&lt;p&gt;&lt;img alt="mongodb mmap" src="https://www.evernote.com/shard/s30/sh/e52f6016-74cb-44f4-b821-b09a4211e4db/6b0227c2023075510f625d5211add1c6/deep/0/MongoDB-London-2013-Understanding-MongoDB-Storage-for-Performance-a....png" /&gt;&lt;/p&gt;
&lt;p&gt;TODO: add mmap fundermentals&lt;/p&gt;
&lt;h2 id="_1"&gt;参考&lt;/h2&gt;
&lt;p&gt;http://www.slideshare.net/mongodb/mongodb-london-2013understanding-mongodb-storage-for-performance-and-data-safety-by-christian-kvalheim-10gen&lt;/p&gt;</summary><category term="MongoDB"></category><category term="mmap"></category><category term="Linux"></category></entry><entry><title>MongoDB Storage Internals</title><link href="http://zhangliyong.github.io/posts/2014/02/18/mongodb-storage-internals.html" rel="alternate"></link><updated>2014-02-18T09:12:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-18:posts/2014/02/18/mongodb-storage-internals.html</id><summary type="html">&lt;p&gt;我们都知道MongoDB通过 &lt;code&gt;mmap&lt;/code&gt; 的方式将存储在磁盘上的数据文件映射到内存中进行操作，那MongoDB是如何组织数据文件的，最近在网上找了相关资源，在此做一个 &lt;strong&gt; 翻译和汇总 &lt;/strong&gt; , 非原创，原文在下面的参考链接部分。&lt;/p&gt;
&lt;p&gt;我们按照从总体到内部的顺序进行分析，&lt;/p&gt;
&lt;h2 id="data-files"&gt;Data Files&lt;/h2&gt;
&lt;p&gt;所有的 data files 存储在 &lt;code&gt;dbpath&lt;/code&gt; 参考所指定的目录中，对应于每个数据库都有一个 、namespace file, 多个journal file 和 data file。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lh&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt; &lt;span class="n"&gt;nogroup&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Feb&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="n"&gt;journal&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt; &lt;span class="n"&gt;nogroup&lt;/span&gt;    &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;Feb&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="n"&gt;mongod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-------&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt; &lt;span class="n"&gt;nogroup&lt;/span&gt;  &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;Feb&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-------&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt; &lt;span class="n"&gt;nogroup&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;Feb&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;-------&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt; &lt;span class="n"&gt;nogroup&lt;/span&gt;  &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;Feb&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;
&lt;span class="n"&gt;drwxr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt; &lt;span class="n"&gt;nogroup&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;Feb&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;_tmp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;mongod.lock&lt;/code&gt; 是MongoDB的lock 文件，可用来判断上次MongoDB是否正常shutdown。&lt;/p&gt;
&lt;p&gt;其余的所有文件为 test 数据库的文件。&lt;/p&gt;
&lt;p&gt;MongoDB 采用 aggressive pre-allocation的方式申请 data files，而且总会多申请一个备用的data file，如上面的test.1为备用的data file。数据文件会以指数级增长，最大为2GB。&lt;/p&gt;
&lt;p&gt;namespace file 内存储了所有的 collection以及index。&lt;/p&gt;
&lt;p&gt;data file 存储了所有的document及index。data file 以 extent为逻辑存储单元，每个data file包含多个extents.&lt;/p&gt;
&lt;h2 id="extents"&gt;Extents&lt;/h2&gt;
&lt;p&gt;每个extent被用来存储doucments或者index。&lt;/p&gt;
&lt;p&gt;extents与data file之间的关系&lt;/p&gt;
&lt;p&gt;&lt;img alt="extents and data file" src="http://blog.mongolab.com/wp-content/uploads/2014/01/data_extents1.png" /&gt;&lt;/p&gt;
&lt;p&gt;extents与namespace file之间的关系&lt;/p&gt;
&lt;p&gt;&lt;img alt="extents and namespace file" src="https://www.evernote.com/shard/s30/sh/7fd6636c-36b9-40a9-b83e-593e248ad8df/d8138c78d9127af7b2edb153d68ed02c/deep/0/MongoDB-London-2013-Understanding-MongoDB-Storage-for-Performance-a....png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个extent只能存储一个collection的documents或index，不能同时用来存储documents和index。&lt;/li&gt;
&lt;li&gt;一个collection通常会有多个extents。&lt;/li&gt;
&lt;li&gt;当需要一个新的extent时会在当前data file中申请extent，如果当前data file空间不足，则申请新的data file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同一个collection的所有extents通过指针连接，namespace file中的collection只需要指向其第一个extent即可。&lt;/p&gt;
&lt;p&gt;&lt;img alt="extents" src="https://www.evernote.com/shard/s30/sh/948ed357-1c61-4d54-bfc3-29694ffaa6ff/0cfd37262cfe8f33dc49cfcf1e9ba242/deep/0/MongoDB-London-2013-Understanding-MongoDB-Storage-for-Performance-a....png" /&gt;&lt;/p&gt;
&lt;p&gt;每个extent会存储一些metadata，其余空间存储records。&lt;/p&gt;
&lt;h2 id="records"&gt;Records&lt;/h2&gt;
&lt;p&gt;每一个record会存储一些metadata及一个document。&lt;/p&gt;
&lt;p&gt;&lt;img alt="records" src="https://www.evernote.com/shard/s30/sh/14d51a20-e929-4e6a-95c6-df0929da3f87/0f543bfa0139eb4b503e32c98d0474e7/deep/0/MongoDB-London-2013-Understanding-MongoDB-Storage-for-Performance-a....png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="record allocation" src="https://www.evernote.com/shard/s30/sh/cc9c8241-32fb-4a88-b794-4bd9430c5887/181d7befe5ea6be0af90f11f235005ed/deep/0/Inside-MongoDB--the-Internals-of-an-Open-Source-Database.png" /&gt;&lt;/p&gt;
&lt;h2 id="indexes"&gt;Indexes&lt;/h2&gt;
&lt;p&gt;MongoDB的索引是BTree结构，序列化到磁盘进行存储，存储在自己的extents中，而且每一个index有一个单独的namespace，并不属于其collection的namespace.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namespaces&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test.system.indexes&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test.foo.$_id_&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test.foo&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="metrics-from-dbstats"&gt;Metrics from db.stats()&lt;/h2&gt;
&lt;p&gt;现在我们知道了MongoDB的数据组织方式，下面分析一下 &lt;code&gt;db.stats()&lt;/code&gt; 的输出指标所代表的含义。&lt;/p&gt;
&lt;h3 id="datasize"&gt;dataSize&lt;/h3&gt;
&lt;p&gt;&lt;img alt="data size" src="http://blog.mongolab.com/wp-content/uploads/2014/01/data_size.png" /&gt;&lt;/p&gt;
&lt;p&gt;dataSize 是所有 documents 的大小总和，包括这个document的padding，也是所有records的总和, 当document被删除时dataSize会变小，但当减小document大小时，dataSize不会变化。&lt;/p&gt;
&lt;h3 id="storagesize"&gt;storageSize&lt;/h3&gt;
&lt;p&gt;&lt;img alt="storageSize" src="http://blog.mongolab.com/wp-content/uploads/2014/01/storage_size.png" /&gt;&lt;/p&gt;
&lt;p&gt;storageSize是所有extents的大小总和，会比dataSize要大，因为它会包括extents中未被使用的空间，以及因document被删除及移动带来的空闲空间。&lt;/p&gt;
&lt;p&gt;当删除或减小document时，storageSize不会变化。&lt;/p&gt;
&lt;h3 id="filesize"&gt;fileSize&lt;/h3&gt;
&lt;p&gt;&lt;img alt="fileSize" src="http://blog.mongolab.com/wp-content/uploads/2014/01/file_size.png" /&gt;&lt;/p&gt;
&lt;p&gt;fileSize 包括所有的data extents, index extents以及data file中未使用的空间，是数据库存储在磁盘上的文件大小。会比storageSize要大，因为它还包括index extents，以及未使用的空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; dataSize 和 storageSize 都不包括index。&lt;/p&gt;
&lt;p&gt;当删除数据库时，fileSize会变化，因为此数据库相应的data file会被删除，但当删除collection，documents及index时fileSize不会变化。&lt;/p&gt;
&lt;h3 id="nssize"&gt;nsSize&lt;/h3&gt;
&lt;p&gt;namespace(&lt;code&gt;test.ns&lt;/code&gt;)文件的大小。namespace file的大小是固定的，但可以通过修改nssize参数调整。&lt;/p&gt;
&lt;h2 id="fragmentation"&gt;Fragmentation&lt;/h2&gt;
&lt;p&gt;当执行 &lt;code&gt;update&lt;/code&gt; 及 &lt;code&gt;remove&lt;/code&gt; 操作时会产生fragmentation.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fragmentation" src="https://www.evernote.com/shard/s30/sh/7fe5f0f5-0453-422d-b10c-44d7858e8f3a/6c4a17b9b49476734e37440f829ee5f8/deep/0/MongoDB-London-2013-Understanding-MongoDB-Storage-for-Performance-a....png" /&gt;&lt;/p&gt;
&lt;p&gt;如果文档的大小不固定，而且经常发生变化，则会产生大量的 fragmentation，这样会浪费内存及磁盘空间，增加Disk IO，而且由于update操作引起的文档移动还会导致索引的更新，使写操作变慢。可以通过比较 &lt;code&gt;db.collection.stats()&lt;/code&gt; 输出中的 &lt;code&gt;size&lt;/code&gt; 和 &lt;code&gt;storageSize&lt;/code&gt; 来判断fragmentation的状况。&lt;/p&gt;
&lt;h3 id="how-to-combat"&gt;How to Combat&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定时执行 &lt;code&gt;compact&lt;/code&gt; ，会lock数据库，要在secondary上执行。&lt;/li&gt;
&lt;li&gt;设定 collection schema, 使document不会增大&lt;/li&gt;
&lt;li&gt;pre-pad documents, 使document不会增大。&lt;/li&gt;
&lt;li&gt;使用不同的collection, 尽量使用 &lt;code&gt;db.collection.drop()&lt;/code&gt; 代替 &lt;code&gt;db.collection.remove()&lt;/code&gt; 删除数据&lt;/li&gt;
&lt;li&gt;设置 &lt;code&gt;usePowerOf2sizes&lt;/code&gt; 提高空间的重用度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://linux.sys-con.com/node/2756958/mobile"&gt;MongoDB Exorcises File Fragmentation Demons&lt;/a&gt; 介绍了 &lt;code&gt;usePowerOf2sizes&lt;/code&gt; 所带来的空间利用率及性能的提升。不同的应用场景其效果也不一样。&lt;/p&gt;
&lt;h2 id="_1"&gt;参考&lt;/h2&gt;
&lt;p&gt;http://www.slideshare.net/mongodb/mongodb-london-2013understanding-mongodb-storage-for-performance-and-data-safety-by-christian-kvalheim-10gen&lt;/p&gt;
&lt;p&gt;http://blog.mongolab.com/2014/01/how-big-is-your-mongodb/&lt;/p&gt;
&lt;p&gt;http://linux.sys-con.com/node/2756958/mobile&lt;/p&gt;</summary><category term="MongoDB"></category><category term="Fragmentation"></category><category term="Disk"></category><category term="Storage"></category></entry><entry><title>sftp in ssh config</title><link href="http://zhangliyong.github.io/posts/2014/02/17/sftp-in-ssh-config.html" rel="alternate"></link><updated>2014-02-17T09:11:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-17:posts/2014/02/17/sftp-in-ssh-config.html</id><summary type="html">&lt;p&gt;今天在使用 fabric 中的 &lt;code&gt;put&lt;/code&gt; 函数上传文件到服务器时，抛出 &lt;code&gt;Connection closed&lt;/code&gt; 的异常，Google 之后发现 &lt;code&gt;put&lt;/code&gt; 使用 &lt;code&gt;sftp&lt;/code&gt; 进行上传，于是使用 &lt;code&gt;sftp&lt;/code&gt; 连接服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt; 
&lt;span class="n"&gt;Connecting&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; 
&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;subsystem&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
&lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;发现连接失败.&lt;/p&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;p&gt;https://forums.gentoo.org/viewtopic-t-802682-start-0.html&lt;/p&gt;
&lt;p&gt;In your /etc/ssh/sshd_config (not ssh_config) file, you probably have a line like this: &lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Subsystem&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;misc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If so, it's the cause of this error message. That's especially true if your sftp user is logging into a chrooted environment, where "/usr/lib" probably does not exist. My own sftp server is configured this way. &lt;/p&gt;
&lt;p&gt;However, SSHD has the sftp functionality built-in and does not need to execute an external "helper" program like that. So, if you have a line like the above, it can be fixed by changing it to: &lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Subsystem&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt; &lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sftp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="fabric"></category><category term="python"></category><category term="ssh"></category><category term="sftp"></category></entry><entry><title>ack.vim</title><link href="http://zhangliyong.github.io/posts/2014/02/04/vim-ack.html" rel="alternate"></link><updated>2014-02-04T16:20:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-04:posts/2014/02/04/vim-ack.html</id><summary type="html">&lt;p&gt;&lt;a href="http://beyondgrep.com/"&gt;ack&lt;/a&gt; 是一个类似于grep的工具，专门针对程序员进行了优化，主要用于搜索源代码，默认忽略非代码文件，支持大部分编程语言。在各平台的安装参考其官方网站 http://beyondgrep.com/ 。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mileszs/ack.vim"&gt;ack.vim&lt;/a&gt; 是ack的vim插件，可在vim下直接使用ack。&lt;/p&gt;
&lt;p&gt;ack可通过配置文件调整搜索行为，如增加新编程语言的技术等。&lt;/p&gt;
&lt;p&gt;类似于大部分unix程序，ack有全局配置(/etc/ackrc)，用户配置(~/.ackrc)，工程配置(.ackrc)等，可参考其manpage。&lt;/p&gt;
&lt;p&gt;下面列出本人的用户配置(~/.ackrc):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;mkd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dotfile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;:/^&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;+/&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;nodotfile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;增加对Markdown和reStructuredText文件的支持，并忽略所有以"."开头的隐藏文件。&lt;/p&gt;</summary><category term="vim"></category><category term="ack"></category><category term="grep"></category></entry><entry><title>Be Newbie Forever</title><link href="http://zhangliyong.github.io/posts/2014/02/03/be-newbie-forever.html" rel="alternate"></link><updated>2014-02-03T00:00:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-02-03:posts/2014/02/03/be-newbie-forever.html</id><summary type="html">&lt;p&gt;You will be newbie forever.&lt;/p&gt;
&lt;p&gt;Get good at the beginner mode, learning new programs, asking dumb questions, making stupid mistakes, soliciting help, and helping others with what you learn (the best way to learn yourself).&lt;/p&gt;
&lt;p&gt;From: http://benoithamelin.tumblr.com/post/17949523929/you-will-be-newbie-forever-get-good-at-the&lt;/p&gt;</summary></entry><entry><title>mem</title><link href="http://zhangliyong.github.io/posts/2014/01/01/mem.html" rel="alternate"></link><updated>2014-01-01T10:29:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-01-01:posts/2014/01/01/mem.html</id><summary type="html">&lt;p&gt;&lt;a href="http://virtualthreads.blogspot.com/2006/02/understanding-memory-usage-on-linux.html"&gt;http://virtualthreads.blogspot.com/2006/02/understanding-memory-usage-on-linux.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cyberciti.biz/tips/howto-find-memory-used-by-program.html"&gt;http://www.cyberciti.biz/tips/howto-find-memory-used-by-program.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pmap&lt;/p&gt;
&lt;p&gt;vmmap on mac&lt;/p&gt;</summary></entry><entry><title>iptables</title><link href="http://zhangliyong.github.io/posts/2014/01/01/iptables.html" rel="alternate"></link><updated>2014-01-01T00:00:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2014-01-01:posts/2014/01/01/iptables.html</id><summary type="html">&lt;p&gt;/etc/sysconfig/iptables - The system scripts that activate the firewall by reading this file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;iptables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;iptables&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;restore&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;iptables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="ref"&gt;Ref:&lt;/h2&gt;
&lt;p&gt;http://www.cyberciti.biz/faq/rhel-fedorta-linux-iptables-firewall-configuration-tutorial/&lt;/p&gt;</summary><category term="iptables"></category><category term="Linux"></category></entry><entry><title>locale</title><link href="http://zhangliyong.github.io/posts/2013/12/22/locale.html" rel="alternate"></link><updated>2014-02-22T11:10:00+08:00</updated><author><name>zhang liyong</name></author><id>tag:zhangliyong.github.io,2013-12-22:posts/2013/12/22/locale.html</id><summary type="html">&lt;p&gt;当在终端下执行某些操作，提示编码问题时，基本是因为终端的locale环境的编码不支持。&lt;/p&gt;
&lt;p&gt;有些终端下默认的LC_*设置为&lt;code&gt;C&lt;/code&gt;，可运行&lt;code&gt;locale&lt;/code&gt;查看，也可查看&lt;code&gt;/etc/default/locale&lt;/code&gt;，
此时终端环境的默认编码是&lt;code&gt;ASCII&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可将其改为&lt;code&gt;UTF8&lt;/code&gt;编码。&lt;/p&gt;
&lt;p&gt;修改方式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用&lt;code&gt;locale -a&lt;/code&gt;命令查看系统支持的category。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在终端下进行&lt;code&gt;export LANG=&amp;lt;category&amp;gt;&lt;/code&gt;，此时终端的&lt;code&gt;LC_*&lt;/code&gt;变量发生了变化。
    如果不想每次手动设置，可将&lt;code&gt;export LANG=&amp;lt;category&amp;gt;&lt;/code&gt;加到&lt;code&gt;.bashrc&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;export LANG=en_US.UTF-8&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Linux"></category><category term="Bash"></category></entry></feed>